theory voucher_protocol begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: KDF/1, MAC/2, adec/2, aenc/2, fst/1, h/1, pair/2, pk/1,
           sdec/2, senc/2, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2













rule (modulo E) Init:
   [ Fr( id ), Fr( Kmac ), Fr( ltkS ), Fr( ltkU ) ]
  --[ Create_S( $S, id ), Create_U( $U, id ) ]->
   [
   St_S_1( $S, id, ltkS, Kmac, pk(ltkU), $U ),
   St_U_1( $U, id, ltkU, pk(ltkS), $S ), Out( pk(ltkU) ),
   Out( pk(ltkS) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_1_send:
   [ St_S_1( S, id, ltkS, Kmac, pkltkU, U ), Fr( x ) ]
  --[ Send( S, aenc('g'^x, pkltkU) ) ]->
   [
   St_S_2( S, id, ltkS, Kmac, pkltkU, U, x ),
   Out( aenc('g'^x, pkltkU) )
   ]
 variants
  rule (modulo AC) S_1_send___VARIANT_1:
     [ St_S_1( S, id, ltkS, Kmac, pkltkU, U ), Fr( x.1 ) ]
    --[ Send( S, aenc('g'^x.1, pkltkU) ) ]->
     [
     St_S_2( S, id, ltkS, Kmac, pkltkU, U, x.1 ),
     Out( aenc('g'^x.1, pkltkU) )
     ]
  ,
  rule (modulo AC) S_1_send___VARIANT_2:
     [ St_S_1( S, id, ltkS, Kmac, pkltkU, U ), Fr( one ) ]
    --[ Send( S, aenc('g', pkltkU) ) ]->
     [
     St_S_2( S, id, ltkS, Kmac, pkltkU, U, one ),
     Out( aenc('g', pkltkU) )
     ]

restriction Restr_U_1_receive_1:
  "∀ x #NOW. (Restr_U_1_receive_1( x ) @ #NOW) ⇒ (¬(x = DH_neutral))"
  // safety formula

rule (modulo E) U_1_receive:
   [ St_U_1( U, id, ltkU, pkltkS, S ), In( g_x_enc ) ]
  --[ Recv( U, g_x_enc ), Restr_U_1_receive_1( adec(g_x_enc, ltkU) )
  ]->
   [ St_U_2( U, id, ltkU, pkltkS, S, adec(g_x_enc, ltkU) ) ]
 variants
  rule (modulo AC) U_1_receive___VARIANT_1:
     [ St_U_1( U, id, ltkU.2, pkltkS, S ), In( g_x_enc.1 ) ]
    --[
    Recv( U, g_x_enc.1 ),
    Restr_U_1_receive_1( adec(g_x_enc.1, ltkU.2) )
    ]->
     [ St_U_2( U, id, ltkU.2, pkltkS, S, adec(g_x_enc.1, ltkU.2) ) ]
  ,
  rule (modulo AC) U_1_receive___VARIANT_2:
     [ St_U_1( U, id, ltkU.1, pkltkS, S ), In( aenc(z.2, pk(ltkU.1)) ) ]
    --[ Recv( U, aenc(z.2, pk(ltkU.1)) ), Restr_U_1_receive_1( z.2 )
    ]->
     [ St_U_2( U, id, ltkU.1, pkltkS, S, z.2 ) ]

rule (modulo E) U_2_send:
   [ St_U_2( U, id, ltkU, pkltkS, S, g_x ), Fr( y ) ]
  --[ Send( U, aenc('g'^y, pkltkS) ) ]->
   [
   St_U_3( U, id, ltkU, pkltkS, S, KDF(<g_x^y, 'encryption'>) ),
   Out( aenc('g'^y, pkltkS) )
   ]
 variants
  rule (modulo AC) U_2_send___VARIANT_1:
     [ St_U_2( U, id, ltkU, pkltkS, S, g_x.2 ), Fr( y.3 ) ]
    --[ Send( U, aenc('g'^y.3, pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<g_x.2^y.3, 'encryption'>) ),
     Out( aenc('g'^y.3, pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_2:
     [ St_U_2( U, id, ltkU, pkltkS, S, g_x.2 ), Fr( one ) ]
    --[ Send( U, aenc('g', pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<g_x.2, 'encryption'>) ),
     Out( aenc('g', pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_3:
     [ St_U_2( U, id, ltkU, pkltkS, S, DH_neutral ), Fr( y.2 ) ]
    --[ Send( U, aenc('g'^y.2, pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<DH_neutral, 'encryption'>) ),
     Out( aenc('g'^y.2, pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_4:
     [ St_U_2( U, id, ltkU, pkltkS, S, z.2^x.3 ), Fr( inv(x.3) ) ]
    --[ Send( U, aenc('g'^inv(x.3), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<z.2, 'encryption'>) ),
     Out( aenc('g'^inv(x.3), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_5:
     [ St_U_2( U, id, ltkU, pkltkS, S, x.3^(x.2*x.4) ), Fr( inv(x.2) ) ]
    --[ Send( U, aenc('g'^inv(x.2), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.3^x.4, 'encryption'>) ),
     Out( aenc('g'^inv(x.2), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_6:
     [ St_U_2( U, id, ltkU, pkltkS, S, z.3^inv(y.2) ), Fr( y.2 ) ]
    --[ Send( U, aenc('g'^y.2, pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<z.3, 'encryption'>) ),
     Out( aenc('g'^y.2, pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_7:
     [
     St_U_2( U, id, ltkU, pkltkS, S, z.2^(x.4*inv(x.3)) ),
     Fr( (x.3*inv(x.4)) )
     ]
    --[ Send( U, aenc('g'^(x.3*inv(x.4)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<z.2, 'encryption'>) ),
     Out( aenc('g'^(x.3*inv(x.4)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_8:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.2^(x.3*x.5*inv(x.4)) ),
     Fr( (x.4*inv(x.5)) )
     ]
    --[ Send( U, aenc('g'^(x.4*inv(x.5)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.2^x.3, 'encryption'>) ),
     Out( aenc('g'^(x.4*inv(x.5)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_9:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^(x.3*inv((x.2*x.5))) ),
     Fr( (x.2*inv(x.3)) )
     ]
    --[ Send( U, aenc('g'^(x.2*inv(x.3)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.4^inv(x.5), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*inv(x.3)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_10:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^(x.3*x.5*inv((x.2*x.6))) ),
     Fr( (x.2*inv(x.3)) )
     ]
    --[ Send( U, aenc('g'^(x.2*inv(x.3)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.4^(x.5*inv(x.6)), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*inv(x.3)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_11:
     [ St_U_2( U, id, ltkU, pkltkS, S, x.2^x.3 ), Fr( inv((x.3*x.4)) ) ]
    --[ Send( U, aenc('g'^inv((x.3*x.4)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.2^inv(x.4), 'encryption'>)
     ),
     Out( aenc('g'^inv((x.3*x.4)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_12:
     [ St_U_2( U, id, ltkU, pkltkS, S, x.2^x.3 ), Fr( (x.4*inv(x.3)) ) ]
    --[ Send( U, aenc('g'^(x.4*inv(x.3)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.2^x.4, 'encryption'>) ),
     Out( aenc('g'^(x.4*inv(x.3)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_13:
     [ St_U_2( U, id, ltkU, pkltkS, S, x.3^inv(x.4) ), Fr( inv(x.2) ) ]
    --[ Send( U, aenc('g'^inv(x.2), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.3^inv((x.2*x.4)), 'encryption'>)
     ),
     Out( aenc('g'^inv(x.2), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_14:
     [ St_U_2( U, id, ltkU, pkltkS, S, x.4^inv(x.2) ), Fr( (x.2*x.3) ) ]
    --[ Send( U, aenc('g'^(x.2*x.3), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.4^x.3, 'encryption'>) ),
     Out( aenc('g'^(x.2*x.3), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_15:
     [ St_U_2( U, id, ltkU, pkltkS, S, x.3^x.4 ), Fr( y.2 ) ]
    --[ Send( U, aenc('g'^y.2, pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.3^(y.2*x.4), 'encryption'>)
     ),
     Out( aenc('g'^y.2, pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_16:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.2^x.3 ),
     Fr( (x.4*inv((x.3*x.5))) )
     ]
    --[ Send( U, aenc('g'^(x.4*inv((x.3*x.5))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.2^(x.4*inv(x.5)), 'encryption'>)
     ),
     Out( aenc('g'^(x.4*inv((x.3*x.5))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_17:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.2^inv(x.3) ),
     Fr( (x.4*inv(x.5)) )
     ]
    --[ Send( U, aenc('g'^(x.4*inv(x.5)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.2^(x.4*inv((x.3*x.5))), 'encryption'>)
     ),
     Out( aenc('g'^(x.4*inv(x.5)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_18:
     [ St_U_2( U, id, ltkU, pkltkS, S, x.3^inv((y.2*x.4)) ), Fr( y.2 ) ]
    --[ Send( U, aenc('g'^y.2, pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.3^inv(x.4), 'encryption'>)
     ),
     Out( aenc('g'^y.2, pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_19:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^inv((x.2*x.5)) ),
     Fr( (x.2*x.3) )
     ]
    --[ Send( U, aenc('g'^(x.2*x.3), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.4^(x.3*inv(x.5)), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*x.3), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_20:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^inv((x.2*x.5)) ),
     Fr( (x.2*inv(x.3)) )
     ]
    --[ Send( U, aenc('g'^(x.2*inv(x.3)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.4^inv((x.3*x.5)), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*inv(x.3)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_21:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^(x.2*x.5) ),
     Fr( inv((x.2*x.3)) )
     ]
    --[ Send( U, aenc('g'^inv((x.2*x.3)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.4^(x.5*inv(x.3)), 'encryption'>)
     ),
     Out( aenc('g'^inv((x.2*x.3)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_22:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^(x.3*x.5) ),
     Fr( (x.2*inv(x.3)) )
     ]
    --[ Send( U, aenc('g'^(x.2*inv(x.3)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.4^(x.2*x.5), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*inv(x.3)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_23:
     [ St_U_2( U, id, ltkU, pkltkS, S, x.3^(x.4*inv(y.2)) ), Fr( y.2 ) ]
    --[ Send( U, aenc('g'^y.2, pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.3^x.4, 'encryption'>) ),
     Out( aenc('g'^y.2, pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_24:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.3^(x.4*inv(x.5)) ),
     Fr( inv(x.2) )
     ]
    --[ Send( U, aenc('g'^inv(x.2), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.3^(x.4*inv((x.2*x.5))), 'encryption'>)
     ),
     Out( aenc('g'^inv(x.2), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_25:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^(x.2*inv(x.5)) ),
     Fr( inv((x.2*x.3)) )
     ]
    --[ Send( U, aenc('g'^inv((x.2*x.3)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.4^inv((x.3*x.5)), 'encryption'>)
     ),
     Out( aenc('g'^inv((x.2*x.3)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_26:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^(x.5*inv(x.2)) ),
     Fr( (x.2*x.3) )
     ]
    --[ Send( U, aenc('g'^(x.2*x.3), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.4^(x.3*x.5), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*x.3), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_27:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.2^(x.5*inv(x.4)) ),
     Fr( (x.3*x.4*inv(x.5)) )
     ]
    --[ Send( U, aenc('g'^(x.3*x.4*inv(x.5)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.2^x.3, 'encryption'>) ),
     Out( aenc('g'^(x.3*x.4*inv(x.5)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_28:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.2^(x.4*inv(x.5)) ),
     Fr( (x.5*inv((x.3*x.4))) )
     ]
    --[ Send( U, aenc('g'^(x.5*inv((x.3*x.4))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.2^inv(x.3), 'encryption'>)
     ),
     Out( aenc('g'^(x.5*inv((x.3*x.4))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_29:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.5^inv((x.2*x.6)) ),
     Fr( (x.2*x.3*inv(x.4)) )
     ]
    --[ Send( U, aenc('g'^(x.2*x.3*inv(x.4)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.5^(x.3*inv((x.4*x.6))), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*x.3*inv(x.4)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_30:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.2^(x.3*x.4) ),
     Fr( (x.5*inv((x.3*x.6))) )
     ]
    --[ Send( U, aenc('g'^(x.5*inv((x.3*x.6))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.2^(x.4*x.5*inv(x.6)), 'encryption'>)
     ),
     Out( aenc('g'^(x.5*inv((x.3*x.6))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_31:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^(x.2*x.5*inv(x.6)) ),
     Fr( inv((x.2*x.3)) )
     ]
    --[ Send( U, aenc('g'^inv((x.2*x.3)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.4^(x.5*inv((x.3*x.6))), 'encryption'>)
     ),
     Out( aenc('g'^inv((x.2*x.3)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_32:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.5^(x.4*x.6*inv(x.2)) ),
     Fr( (x.2*x.3*inv(x.4)) )
     ]
    --[ Send( U, aenc('g'^(x.2*x.3*inv(x.4)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S, KDF(<x.5^(x.3*x.6), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*x.3*inv(x.4)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_33:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.5^(x.3*x.6*inv(x.2)) ),
     Fr( (x.2*inv((x.3*x.4))) )
     ]
    --[ Send( U, aenc('g'^(x.2*inv((x.3*x.4))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.5^(x.6*inv(x.4)), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*inv((x.3*x.4))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_34:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.2^(x.3*inv(x.4)) ),
     Fr( (x.4*x.5*inv((x.3*x.6))) )
     ]
    --[ Send( U, aenc('g'^(x.4*x.5*inv((x.3*x.6))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.2^(x.5*inv(x.6)), 'encryption'>)
     ),
     Out( aenc('g'^(x.4*x.5*inv((x.3*x.6))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_35:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^(x.5*inv(x.6)) ),
     Fr( (x.2*inv(x.3)) )
     ]
    --[ Send( U, aenc('g'^(x.2*inv(x.3)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.4^(x.2*x.5*inv((x.3*x.6))), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*inv(x.3)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_36:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.2^(x.3*inv(x.4)) ),
     Fr( (x.5*inv((x.3*x.6))) )
     ]
    --[ Send( U, aenc('g'^(x.5*inv((x.3*x.6))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.2^(x.5*inv((x.4*x.6))), 'encryption'>)
     ),
     Out( aenc('g'^(x.5*inv((x.3*x.6))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_37:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.3^(x.4*inv((y.2*x.5))) ),
     Fr( y.2 )
     ]
    --[ Send( U, aenc('g'^y.2, pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.3^(x.4*inv(x.5)), 'encryption'>)
     ),
     Out( aenc('g'^y.2, pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_38:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^(x.5*inv((x.2*x.6))) ),
     Fr( (x.2*x.3) )
     ]
    --[ Send( U, aenc('g'^(x.2*x.3), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.4^(x.3*x.5*inv(x.6)), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*x.3), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_39:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.5^(x.4*inv((x.2*x.6))) ),
     Fr( (x.2*x.3*inv(x.4)) )
     ]
    --[ Send( U, aenc('g'^(x.2*x.3*inv(x.4)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.5^(x.3*inv(x.6)), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*x.3*inv(x.4)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_40:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.4^(x.5*inv((x.2*x.6))) ),
     Fr( (x.2*inv(x.3)) )
     ]
    --[ Send( U, aenc('g'^(x.2*inv(x.3)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.4^(x.5*inv((x.3*x.6))), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*inv(x.3)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_41:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.5^(x.3*inv((x.2*x.6))) ),
     Fr( (x.2*inv((x.3*x.4))) )
     ]
    --[ Send( U, aenc('g'^(x.2*inv((x.3*x.4))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.5^inv((x.4*x.6)), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*inv((x.3*x.4))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_42:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.2^(x.3*x.4*inv(x.5)) ),
     Fr( (x.5*x.6*inv((x.3*x.7))) )
     ]
    --[ Send( U, aenc('g'^(x.5*x.6*inv((x.3*x.7))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.2^(x.4*x.6*inv(x.7)), 'encryption'>)
     ),
     Out( aenc('g'^(x.5*x.6*inv((x.3*x.7))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_43:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.5^(x.3*x.6*inv(x.7)) ),
     Fr( (x.2*inv((x.3*x.4))) )
     ]
    --[ Send( U, aenc('g'^(x.2*inv((x.3*x.4))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.5^(x.2*x.6*inv((x.4*x.7))), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*inv((x.3*x.4))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_44:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.5^(x.4*x.6*inv((x.2*x.7))) ),
     Fr( (x.2*x.3*inv(x.4)) )
     ]
    --[ Send( U, aenc('g'^(x.2*x.3*inv(x.4)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.5^(x.3*x.6*inv(x.7)), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*x.3*inv(x.4)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_45:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.5^(x.3*x.6*inv((x.2*x.7))) ),
     Fr( (x.2*inv((x.3*x.4))) )
     ]
    --[ Send( U, aenc('g'^(x.2*inv((x.3*x.4))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.5^(x.6*inv((x.4*x.7))), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*inv((x.3*x.4))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_46:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.5^(x.6*inv((x.2*x.7))) ),
     Fr( (x.2*x.3*inv(x.4)) )
     ]
    --[ Send( U, aenc('g'^(x.2*x.3*inv(x.4)), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.5^(x.3*x.6*inv((x.4*x.7))), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*x.3*inv(x.4)), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_47:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.6^(x.4*inv((x.2*x.7))) ),
     Fr( (x.2*x.3*inv((x.4*x.5))) )
     ]
    --[ Send( U, aenc('g'^(x.2*x.3*inv((x.4*x.5))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.6^(x.3*inv((x.5*x.7))), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*x.3*inv((x.4*x.5))), pkltkS) )
     ]
  ,
  rule (modulo AC) U_2_send___VARIANT_48:
     [
     St_U_2( U, id, ltkU, pkltkS, S, x.6^(x.4*x.7*inv((x.2*x.8))) ),
     Fr( (x.2*x.3*inv((x.4*x.5))) )
     ]
    --[ Send( U, aenc('g'^(x.2*x.3*inv((x.4*x.5))), pkltkS) ) ]->
     [
     St_U_3( U, id, ltkU, pkltkS, S,
             KDF(<x.6^(x.3*x.7*inv((x.5*x.8))), 'encryption'>)
     ),
     Out( aenc('g'^(x.2*x.3*inv((x.4*x.5))), pkltkS) )
     ]

restriction Restr_S_2_receive_1:
  "∀ x #NOW. (Restr_S_2_receive_1( x ) @ #NOW) ⇒ (¬(x = DH_neutral))"
  // safety formula

rule (modulo E) S_2_receive:
   [ St_S_2( S, id, ltkS, Kmac, pkltkU, U, x ), In( g_y_enc ) ]
  --[ Recv( S, g_y_enc ), Restr_S_2_receive_1( adec(g_y_enc, ltkS) )
  ]->
   [
   St_S_3( S, id, ltkS, Kmac, pkltkU, U,
           KDF(<adec(g_y_enc, ltkS)^x, 'encryption'>)
   )
   ]
 variants
  rule (modulo AC) S_2_receive___VARIANT_1:
     [ St_S_2( S, id, ltkS.3, Kmac, pkltkU, U, x.4 ), In( g_y_enc.2 ) ]
    --[
    Recv( S, g_y_enc.2 ),
    Restr_S_2_receive_1( adec(g_y_enc.2, ltkS.3) )
    ]->
     [
     St_S_3( S, id, ltkS.3, Kmac, pkltkU, U,
             KDF(<adec(g_y_enc.2, ltkS.3)^x.4, 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_2:
     [ St_S_2( S, id, ltkS.3, Kmac, pkltkU, U, one ), In( g_y_enc.2 ) ]
    --[
    Recv( S, g_y_enc.2 ),
    Restr_S_2_receive_1( adec(g_y_enc.2, ltkS.3) )
    ]->
     [
     St_S_3( S, id, ltkS.3, Kmac, pkltkU, U,
             KDF(<adec(g_y_enc.2, ltkS.3), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_3:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, one ),
     In( aenc(z.3, pk(ltkS.2)) )
     ]
    --[ Recv( S, aenc(z.3, pk(ltkS.2)) ), Restr_S_2_receive_1( z.3 )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U, KDF(<z.3, 'encryption'>) )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_4:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, x.3 ),
     In( aenc(z.4, pk(ltkS.2)) )
     ]
    --[ Recv( S, aenc(z.4, pk(ltkS.2)) ), Restr_S_2_receive_1( z.4 )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<z.4^x.3, 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_5:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, x ),
     In( aenc(DH_neutral, pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(DH_neutral, pk(ltkS.2)) ),
    Restr_S_2_receive_1( DH_neutral )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<DH_neutral, 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_6:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, inv(x.4) ),
     In( aenc(z.3^x.4, pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(z.3^x.4, pk(ltkS.2)) ),
    Restr_S_2_receive_1( z.3^x.4 )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U, KDF(<z.3, 'encryption'>) )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_7:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, x.3 ),
     In( aenc(z.4^inv(x.3), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(z.4^inv(x.3), pk(ltkS.2)) ),
    Restr_S_2_receive_1( z.4^inv(x.3) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U, KDF(<z.4, 'encryption'>) )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_8:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.4*inv(x.5)) ),
     In( aenc(z.3^(x.5*inv(x.4)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(z.3^(x.5*inv(x.4)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( z.3^(x.5*inv(x.4)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U, KDF(<z.3, 'encryption'>) )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_9:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, x.3 ),
     In( aenc(x.4^x.5, pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.4^x.5, pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.4^x.5 )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.4^(x.3*x.5), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_10:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, x.3 ),
     In( aenc(x.4^inv((x.3*x.5)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.4^inv((x.3*x.5)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.4^inv((x.3*x.5)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.4^inv(x.5), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_11:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, inv(x.3) ),
     In( aenc(x.4^(x.3*x.5), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.4^(x.3*x.5), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.4^(x.3*x.5) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.4^x.5, 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_12:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, x.3 ),
     In( aenc(x.4^(x.5*inv(x.3)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.4^(x.5*inv(x.3)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.4^(x.5*inv(x.3)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.4^x.5, 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_13:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.5*inv(x.6)) ),
     In( aenc(x.3^(x.4*x.6*inv(x.5)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.3^(x.4*x.6*inv(x.5)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.3^(x.4*x.6*inv(x.5)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.3^x.4, 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_14:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, x.3 ),
     In( aenc(x.4^(x.5*inv((x.3*x.6))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.4^(x.5*inv((x.3*x.6))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.4^(x.5*inv((x.3*x.6))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.4^(x.5*inv(x.6)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_15:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv(x.4)) ),
     In( aenc(x.5^(x.4*inv((x.3*x.6))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^(x.4*inv((x.3*x.6))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^(x.4*inv((x.3*x.6))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^inv(x.6), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_16:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, inv((x.4*x.5)) ),
     In( aenc(x.3^x.4, pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.3^x.4, pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.3^x.4 )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.3^inv(x.5), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_17:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.4*inv(x.5)) ),
     In( aenc(x.3^x.5, pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.3^x.5, pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.3^x.5 )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.3^x.4, 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_18:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, inv(x.3) ),
     In( aenc(x.4^inv(x.5), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.4^inv(x.5), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.4^inv(x.5) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.4^inv((x.3*x.5)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_19:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4) ),
     In( aenc(x.5^inv(x.3), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^inv(x.3), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^inv(x.3) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^x.4, 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_20:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv(x.4)) ),
     In( aenc(x.5^(x.4*x.6*inv((x.3*x.7))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^(x.4*x.6*inv((x.3*x.7))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^(x.4*x.6*inv((x.3*x.7))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^(x.6*inv(x.7)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_21:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.5*inv((x.4*x.6))) ),
     In( aenc(x.3^x.4, pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.3^x.4, pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.3^x.4 )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.3^(x.5*inv(x.6)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_22:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv(x.4)) ),
     In( aenc(x.5^inv(x.6), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^inv(x.6), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^inv(x.6) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^(x.3*inv((x.4*x.6))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_23:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4) ),
     In( aenc(x.5^inv((x.3*x.6)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^inv((x.3*x.6)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^inv((x.3*x.6)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^(x.4*inv(x.6)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_24:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv(x.4)) ),
     In( aenc(x.5^inv((x.3*x.6)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^inv((x.3*x.6)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^inv((x.3*x.6)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^inv((x.4*x.6)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_25:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, inv((x.3*x.4)) ),
     In( aenc(x.5^(x.3*x.6), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^(x.3*x.6), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^(x.3*x.6) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^(x.6*inv(x.4)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_26:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv(x.4)) ),
     In( aenc(x.5^(x.4*x.6), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^(x.4*x.6), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^(x.4*x.6) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^(x.3*x.6), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_27:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, inv(x.3) ),
     In( aenc(x.4^(x.5*inv(x.6)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.4^(x.5*inv(x.6)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.4^(x.5*inv(x.6)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.4^(x.5*inv((x.3*x.6))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_28:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, inv((x.3*x.4)) ),
     In( aenc(x.5^(x.3*inv(x.6)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^(x.3*inv(x.6)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^(x.3*inv(x.6)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^inv((x.4*x.6)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_29:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4) ),
     In( aenc(x.5^(x.6*inv(x.3)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^(x.6*inv(x.3)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^(x.6*inv(x.3)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^(x.4*x.6), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_30:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.4*x.5*inv(x.6)) ),
     In( aenc(x.3^(x.6*inv(x.5)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.3^(x.6*inv(x.5)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.3^(x.6*inv(x.5)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.3^x.4, 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_31:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.5*inv((x.4*x.6))) ),
     In( aenc(x.3^(x.6*inv(x.5)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.3^(x.6*inv(x.5)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.3^(x.6*inv(x.5)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.3^inv(x.4), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_32:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4*inv(x.5)) ),
     In( aenc(x.6^inv((x.3*x.7)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.6^inv((x.3*x.7)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.6^inv((x.3*x.7)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.6^(x.4*inv((x.5*x.7))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_33:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.6*inv((x.4*x.7))) ),
     In( aenc(x.3^(x.4*x.5), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.3^(x.4*x.5), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.3^(x.4*x.5) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.3^(x.5*x.6*inv(x.7)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_34:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, inv((x.3*x.4)) ),
     In( aenc(x.5^(x.3*x.6*inv(x.7)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^(x.3*x.6*inv(x.7)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^(x.3*x.6*inv(x.7)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^(x.6*inv((x.4*x.7))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_35:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4*inv(x.5)) ),
     In( aenc(x.6^(x.5*x.7*inv(x.3)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.6^(x.5*x.7*inv(x.3)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.6^(x.5*x.7*inv(x.3)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.6^(x.4*x.7), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_36:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv((x.4*x.5))) ),
     In( aenc(x.6^(x.4*x.7*inv(x.3)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.6^(x.4*x.7*inv(x.3)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.6^(x.4*x.7*inv(x.3)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.6^(x.7*inv(x.5)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_37:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.4*x.7*inv((x.5*x.6))) ),
     In( aenc(x.3^(x.6*inv(x.7)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.3^(x.6*inv(x.7)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.3^(x.6*inv(x.7)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.3^(x.4*inv(x.5)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_38:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv(x.4)) ),
     In( aenc(x.5^(x.6*inv(x.7)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^(x.6*inv(x.7)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^(x.6*inv(x.7)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^(x.3*x.6*inv((x.4*x.7))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_39:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv((x.4*x.5))) ),
     In( aenc(x.6^(x.4*inv(x.7)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.6^(x.4*inv(x.7)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.6^(x.4*inv(x.7)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.6^(x.3*inv((x.5*x.7))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_40:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4) ),
     In( aenc(x.5^(x.6*inv((x.3*x.7))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^(x.6*inv((x.3*x.7))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^(x.6*inv((x.3*x.7))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^(x.4*x.6*inv(x.7)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_41:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4*inv(x.5)) ),
     In( aenc(x.6^(x.5*inv((x.3*x.7))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.6^(x.5*inv((x.3*x.7))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.6^(x.5*inv((x.3*x.7))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.6^(x.4*inv(x.7)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_42:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv(x.4)) ),
     In( aenc(x.5^(x.6*inv((x.3*x.7))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.5^(x.6*inv((x.3*x.7))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.5^(x.6*inv((x.3*x.7))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.5^(x.6*inv((x.4*x.7))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_43:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv((x.4*x.5))) ),
     In( aenc(x.6^(x.4*inv((x.3*x.7))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.6^(x.4*inv((x.3*x.7))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.6^(x.4*inv((x.3*x.7))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.6^inv((x.5*x.7)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_44:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4*inv((x.5*x.6))) ),
     In( aenc(x.7^(x.5*x.8*inv(x.3)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.7^(x.5*x.8*inv(x.3)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.7^(x.5*x.8*inv(x.3)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.7^(x.4*x.8*inv(x.6)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_45:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv((x.4*x.5))) ),
     In( aenc(x.6^(x.4*x.7*inv(x.8)), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.6^(x.4*x.7*inv(x.8)), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.6^(x.4*x.7*inv(x.8)) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.6^(x.3*x.7*inv((x.5*x.8))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_46:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4*inv(x.5)) ),
     In( aenc(x.6^(x.5*x.7*inv((x.3*x.8))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.6^(x.5*x.7*inv((x.3*x.8))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.6^(x.5*x.7*inv((x.3*x.8))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.6^(x.4*x.7*inv(x.8)), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_47:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*inv((x.4*x.5))) ),
     In( aenc(x.6^(x.4*x.7*inv((x.3*x.8))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.6^(x.4*x.7*inv((x.3*x.8))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.6^(x.4*x.7*inv((x.3*x.8))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.6^(x.7*inv((x.5*x.8))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_48:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4*inv(x.5)) ),
     In( aenc(x.6^(x.7*inv((x.3*x.8))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.6^(x.7*inv((x.3*x.8))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.6^(x.7*inv((x.3*x.8))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.6^(x.4*x.7*inv((x.5*x.8))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_49:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4*inv((x.5*x.6))) ),
     In( aenc(x.7^(x.5*inv((x.3*x.8))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.7^(x.5*inv((x.3*x.8))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.7^(x.5*inv((x.3*x.8))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.7^(x.4*inv((x.6*x.8))), 'encryption'>)
     )
     ]
  ,
  rule (modulo AC) S_2_receive___VARIANT_50:
     [
     St_S_2( S, id, ltkS.2, Kmac, pkltkU, U, (x.3*x.4*inv((x.5*x.6))) ),
     In( aenc(x.7^(x.5*x.8*inv((x.3*x.9))), pk(ltkS.2)) )
     ]
    --[
    Recv( S, aenc(x.7^(x.5*x.8*inv((x.3*x.9))), pk(ltkS.2)) ),
    Restr_S_2_receive_1( x.7^(x.5*x.8*inv((x.3*x.9))) )
    ]->
     [
     St_S_3( S, id, ltkS.2, Kmac, pkltkU, U,
             KDF(<x.7^(x.4*x.8*inv((x.6*x.9))), 'encryption'>)
     )
     ]

rule (modulo E) S_3_send:
   [ St_S_3( S, id, ltkS, Kmac, pkltkU, U, K ) ]
  --[
  Send( S, senc('sendmeyourtoken', K) ),
  AUTO_OUT_TERM_1_0_0__U_5_receive( senc('sendmeyourtoken', K) ),
  AUTO_OUT_TERM_1_0_0__S_4_receive( senc('sendmeyourtoken', K) )
  ]->
   [
   St_S_4( S, id, ltkS, Kmac, pkltkU, U, K ),
   Out( senc('sendmeyourtoken', K) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) U_3_receive:
   [
   St_U_3( U, id, ltkU, pkltkS, S, K ),
   In( senc('sendmeyourtoken', K) )
   ]
  --[ Recv( U, senc('sendmeyourtoken', K) ), SharedKey( U, id, K )
  ]->
   [ St_U_4( U, id, ltkU, pkltkS, S, K ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) U_3_send:
   [ St_U_4( U, id, ltkU, pkltkS, S, K ), Fr( token ) ]
  --[
  AUTO_OUT_TERM_1_0_0__U_5_receive( senc(<'mytoken:', h(token)>, K)
  ),
  AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', h(token)>, K)
  ),
  AUTO_OUT_TERM_1_0_0__U_5_receive( senc(h(token), K) ),
  AUTO_OUT_TERM_1_0_0__S_4_receive( senc(h(token), K) ),
  Send( U, senc(<'mytoken:', h(token)>, K) ), GenerateToken( token )
  ]->
   [
   St_U_5( U, id, ltkU, pkltkS, S, K, token ),
   Out( senc(<'mytoken:', h(token)>, K) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_4_receive:
   [
   St_S_4( S, id, ltkS, Kmac, pkltkU, U, K ),
   In( senc(<'mytoken:', H>, K) )
   ]
  --[
  AUTO_IN_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>, K), H ),
  Recv( S, senc(<'mytoken:', H>, K) ),
  AUTO_IN_TERM_1_0_0__S_4_receive( senc(H, K), H ),
  SharedKey( S, id, K ), ReceiveHash( H )
  ]->
   [ St_S_5( S, id, ltkS, Kmac, pkltkU, U, K, H ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_5_send:
   [ St_S_5( S, id, ltkS, Kmac, pkltkU, U, K, H ) ]
  --[
  Send( S, senc(<<'Voucher', H>, MAC(<'Voucher', H>, Kmac)>, K) ),
  AUTO_OUT_TERM_1_0_0__U_5_receive( senc(<<'Voucher', H>, 
                                          MAC(<'Voucher', H>, Kmac)>,
                                         K)
  ),
  AUTO_OUT_TERM_1_0_0__S_4_receive( senc(<<'Voucher', H>, 
                                          MAC(<'Voucher', H>, Kmac)>,
                                         K)
  ),
  Finish_Phase1( S, U, id )
  ]->
   [
   St_S_6( S, id, ltkS, Kmac ),
   Out( senc(<<'Voucher', H>, MAC(<'Voucher', H>, Kmac)>, K) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) U_5_receive:
   [
   St_U_5( U, id, ltkU, pkltkS, S, K, token ),
   In( senc(voucher_with_tag, K) )
   ]
  --[
  Recv( U, senc(voucher_with_tag, K) ),
  AUTO_IN_TERM_1_0_0__U_5_receive( senc(voucher_with_tag, K),
                                   voucher_with_tag
  ),
  Finish_Phase1( U, S, id )
  ]->
   [ St_U_6( U, id, ltkU, pkltkS, S, K, token, voucher_with_tag ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) U_6_send:
   [ St_U_6( U, id, ltkU, pkltkS, S, K, token, voucher_with_tag ) ]
  --[
  Send( U, <voucher_with_tag, token> ),
  Finish_Phase2( U, id, voucher_with_tag ),
  StartRedeemVoucher( U, S, id, voucher_with_tag )
  ]->
   [
   St_U_7( U, id, ltkU, pkltkS, S, K, token, voucher_with_tag ),
   Out( <voucher_with_tag, token> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S_6_receive:
   [
   St_S_6( S, id, ltkS, Kmac ),
   In( <<<'Voucher', h(token)>, MAC(<'Voucher', h(token)>, Kmac)>, 
        token>
   )
   ]
  --[
  Recv( S,
        <<<'Voucher', h(token)>, MAC(<'Voucher', h(token)>, Kmac)>, token>
  ),
  Finish_Phase2( S, id,
                 <<'Voucher', h(token)>, MAC(<'Voucher', h(token)>, Kmac)>
  ),
  FinishRedeemVoucher( S, id,
                       <<'Voucher', h(token)>, MAC(<'Voucher', h(token)>, Kmac)>
  )
  ]->
   [ St_S_7( S, id, ltkS, Kmac ) ]

  /* has exactly the trivial AC variant */

lemma executable_phase1:
  exists-trace
  "∃ S U id #i #j.
    (((Finish_Phase1( S, U, id ) @ #i) ∧
      (Finish_Phase1( U, S, id ) @ #j)) ∧
     (¬(S = U))) ∧
    (∀ U1 U2 S1 S2 #i.1 #j.1.
      ((Create_U( U1, S1 ) @ #i.1) ∧ (Create_U( U2, S2 ) @ #j.1)) ⇒
      (#i.1 = #j.1))"
/*
guarded formula characterizing all satisfying traces:
"∃ S U id #i #j.
  (Finish_Phase1( S, U, id ) @ #i) ∧ (Finish_Phase1( U, S, id ) @ #j)
 ∧
  (¬(S = U)) ∧
  (∀ U1 U2 S1 S2 #i.1 #j.1.
    (Create_U( U1, S1 ) @ #i.1) ∧ (Create_U( U2, S2 ) @ #j.1)
   ⇒
    #i.1 = #j.1)"
*/
simplify
solve( Finish_Phase1( S, U, id ) @ #i )
  case S_5_send
  solve( St_S_5( S, id, ltkS, Kmac, pkltkU, U, K, H ) ▶₀ #i )
    case S_4_receive_case_4
    solve( Finish_Phase1( $U, $S, ~n ) @ #j )
      case U_5_receive
      solve( St_U_5( $U, ~n, ltkU, pkltkS, $S, K, token ) ▶₀ #j )
        case U_3_send_case_4
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<x^(x.1*~n.4), 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          solve( !KU( aenc(x^~n.5, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_15
            solve( !KU( senc(voucher_with_tag,
                             KDF(<'g'^(~n.4*~n.5), 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send
              solve( !KU( aenc('g'^~n.4, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma executable_phase2:
  exists-trace
  "∃ S U voucher id #i #j.
    (((Finish_Phase2( U, id, voucher ) @ #i) ∧
      (Finish_Phase2( S, id, voucher ) @ #j)) ∧
     (¬(S = U))) ∧
    (∀ U1 U2 S1 S2 #i.1 #j.1.
      ((Create_U( U1, S1 ) @ #i.1) ∧ (Create_U( U2, S2 ) @ #j.1)) ⇒
      (#i.1 = #j.1))"
/*
guarded formula characterizing all satisfying traces:
"∃ S U voucher id #i #j.
  (Finish_Phase2( U, id, voucher ) @ #i) ∧
  (Finish_Phase2( S, id, voucher ) @ #j)
 ∧
  (¬(S = U)) ∧
  (∀ U1 U2 S1 S2 #i.1 #j.1.
    (Create_U( U1, S1 ) @ #i.1) ∧ (Create_U( U2, S2 ) @ #j.1)
   ⇒
    #i.1 = #j.1)"
*/
simplify
solve( Finish_Phase2( U, id, voucher ) @ #i )
  case S_6_receive
  solve( St_S_6( U, id, ltkS, Kmac ) ▶₀ #i )
    case S_5_send_case_4
    solve( Finish_Phase2( S.1, ~n,
                          <<'Voucher', h(token)>, MAC(<'Voucher', h(token)>, ~n.2)>
           ) @ #j )
      case U_6_send
      solve( St_U_6( S.1, ~n, ltkU, pkltkS, S.2, K, token.1,
                     <<'Voucher', h(token)>, MAC(<'Voucher', h(token)>, ~n.2)>
             ) ▶₀ #j )
        case U_5_receive_case_4
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<x.2^(x.3*~n.6), 'encryption'>))
               ) @ #vk.7 )
          case U_3_send_case_1
          solve( !KU( aenc(x^~n.4, pk(~n.1)) ) @ #vk.8 )
            case U_2_send___VARIANT_15
            solve( !KU( senc(<<'Voucher', h(token)>, 
                              MAC(<'Voucher', h(token)>, ~n.2)>,
                             KDF(<'g'^(~n.4*~n.5), 'encryption'>))
                   ) @ #vk.9 )
              case S_5_send
              solve( !KU( ~n.3 ) @ #vk.9 )
                case U_6_send
                solve( !KU( h(~n.3) ) @ #vk.8 )
                  case U_6_send
                  solve( !KU( MAC(<'Voucher', h(~n.3)>, ~n.2) ) @ #vk.9 )
                    case U_6_send
                    solve( !KU( senc('sendmeyourtoken',
                                     KDF(<'g'^(~n.5*~n.6), 'encryption'>))
                           ) @ #vk.10 )
                      case S_3_send
                      solve( !KU( aenc('g'^~n.5, pk(~n.4)) ) @ #vk.11 )
                        case S_1_send___VARIANT_1
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma key_agreement:
  all-traces
  "∀ S U K1 K2 id #i #j.
    ((SharedKey( S, id, K1 ) @ #i) ∧ (SharedKey( U, id, K2 ) @ #j)) ⇒
    (K1 = K2)"
/*
guarded formula characterizing all counter-examples:
"∃ S U K1 K2 id #i #j.
  (SharedKey( S, id, K1 ) @ #i) ∧ (SharedKey( U, id, K2 ) @ #j)
 ∧
  ¬(K1 = K2)"
*/
simplify
solve( SharedKey( S, id, K1 ) @ #i )
  case S_4_receive
  solve( St_S_4( S, id, ltkS, Kmac, pkltkU, U, K1 ) ▶₀ #i )
    case S_3_send_case_1
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send
        by contradiction /* from formulas */
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_15
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( senc('sendmeyourtoken',
                           KDF(<x^(x.1*~n.6), 'encryption'>))
                 ) @ #vk.2 )
            case S_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case S_3_send_case_2
            solve( !KU( aenc(x^~x.1, pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                     ) @ #vk.5 )
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.13 )
                qed
              qed
            qed
          next
            case S_3_send_case_3
            solve( !KU( aenc(x^(x.1*~n.7), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*~n.7) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.16 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_3
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.7 ) @ #vk.12 )
              qed
            qed
          next
            case S_3_send_case_4
            solve( !KU( aenc(x^x.1, pk(~n.3)) ) @ #vk.3 )
              case S_1_send___VARIANT_1
              solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                     ) @ #vk.5 )
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.7 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.11 )
                qed
              qed
            next
              case c_aenc
              solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                     ) @ #vk.5 )
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.13 )
                qed
              qed
            qed
          next
            case S_3_send_case_5
            solve( !KU( aenc(x^inv(x.1), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                     ) @ #vk.5 )
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.13 )
                qed
              qed
            qed
          next
            case S_3_send_case_6
            solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                     ) @ #vk.5 )
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.13 )
                qed
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<x^(x.1*~n.6), 'encryption'>) ) @ #vk.7 )
              case c_KDF
              solve( !KU( x^(x.1*~n.6) ) @ #vk.9 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.11 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.1 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_3
                by solve( !KU( ~n.13 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.11 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<x^(x.1*~n.5), 'encryption'>))
                   ) @ #vk.3 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x^~x.1, pk(~n.3)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            next
              case S_3_send_case_3
              solve( !KU( aenc(x^(x.1*~n.6), pk(~n.3)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*~n.6) ) @ #vk.12 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.10 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.17 )
                qed
              qed
            next
              case S_3_send_case_4
              solve( !KU( aenc(x^x.1, pk(~n.3)) ) @ #vk.4 )
                case S_1_send___VARIANT_1
                solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.13 )
                qed
              next
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            next
              case S_3_send_case_5
              solve( !KU( aenc(x^inv(x.1), pk(~n.3)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            next
              case S_3_send_case_6
              solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.3)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x^(x.1*~n.5), 'encryption'>) ) @ #vk.12 )
                case c_KDF
                solve( !KU( x^(x.1*~n.5) ) @ #vk.14 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.1 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.18 )
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_18
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(x^inv((x.1*~n.6)), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                   ) @ #vk.5 )
              case c_aenc
              solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.8 )
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.12 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.3)) ) @ #vk.4 )
              case c_aenc
              solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.9 )
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.14 )
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_1
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( senc('sendmeyourtoken',
                           KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>))
                 ) @ #vk.2 )
            case S_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case S_3_send_case_2
            solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                   ) @ #vk.5 )
              case c_aenc
              solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.7 )
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.11 )
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>)
                   ) @ #vk.7 )
              case c_KDF
              solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                     ) @ #vk.6 )
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.11 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<adec(g_x_enc, ~n.3)^~n.5, 'encryption'>))
                   ) @ #vk.3 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.9 )
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.13 )
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.5, 'encryption'>)
                     ) @ #vk.12 )
                case c_KDF
                solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.10 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.16 )
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_2
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.6, 'encryption'>))
                 ) @ #vk.2 )
            case S_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case S_3_send_case_2
            solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.3 )
              case S_1_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                     ) @ #vk.5 )
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.13 )
                qed
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<g_x^~n.6, 'encryption'>) ) @ #vk.7 )
              case c_KDF
              solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                case S_1_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                       ) @ #vk.6 )
                  case c_aenc
                  solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.13 )
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.17 )
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.5, 'encryption'>))
                   ) @ #vk.3 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                case S_1_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<g_x^~n.5, 'encryption'>) ) @ #vk.12 )
                case c_KDF
                solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.5 )
                  case S_1_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.10 )
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.18 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_23
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(x^(x.1*inv(~n.6)), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^(x.1*inv(~n.6)) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.12 )
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.3)) ) @ #vk.4 )
              case c_aenc
              solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.11 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.17 )
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_37
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(x^(x.1*inv((x.2*~n.6))), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^(x.1*inv((x.2*~n.6))) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.14 )
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.3)) ) @ #vk.4 )
              case c_aenc
              solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.11 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.19 )
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_6
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(z^inv(~n.6), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.4*inv(~n.10)), pk(~n.8))
                   ) @ #vk.5 )
              case c_aenc
              solve( !KU( adec(g_y_enc, ~n.1)^(~n.4*inv(~n.7)) ) @ #vk.8 )
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.12 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(z^inv(~n.5), pk(~n.3)) ) @ #vk.4 )
              case c_aenc
              solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.9 )
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.14 )
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case S_3_send_case_2
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send
        by contradiction /* from formulas */
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_15
        solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_15
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<x^(x.1*~n.6), 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x^~x.1, pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case S_3_send_case_3
              solve( !KU( aenc(x^(x.1*~n.7), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x^(x.1*~n.7) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.7 ) @ #vk.14 )
                qed
              qed
            next
              case S_3_send_case_4
              solve( !KU( aenc(x^x.1, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.12 )
                  qed
                qed
              next
                case c_aenc
                solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case S_3_send_case_5
              solve( !KU( aenc(x^inv(x.1), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case S_3_send_case_6
              solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x^(x.1*~n.6), 'encryption'>) ) @ #vk.9 )
                case c_KDF
                solve( !KU( x^(x.1*~n.6) ) @ #vk.11 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.1 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.16 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<z^~n.4, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.2 )
              case U_2_send___VARIANT_15
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( senc('sendmeyourtoken',
                               KDF(<x^(x.1*~n.5), 'encryption'>))
                     ) @ #vk.3 )
                case S_3_send_case_1
                by contradiction /* non-normal terms */
              next
                case S_3_send_case_2
                solve( !KU( aenc(x^~x.1, pk(~n.3)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( z^~n.4 ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              next
                case S_3_send_case_3
                solve( !KU( aenc(x^(x.1*~n.6), pk(~n.3)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.6) ) @ #vk.14 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.10 ) @ #vk.16 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~n.6 ) @ #vk.19 )
                  qed
                qed
              next
                case S_3_send_case_4
                solve( !KU( aenc(x^x.1, pk(~n.3)) ) @ #vk.4 )
                  case S_1_send___VARIANT_1
                  solve( !KU( z^~n.4 ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.14 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.14 )
                  qed
                next
                  case c_aenc
                  solve( !KU( z^~n.4 ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              next
                case S_3_send_case_5
                solve( !KU( aenc(x^inv(x.1), pk(~n.3)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( z^~n.4 ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              next
                case S_3_send_case_6
                solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.3)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( z^~n.4 ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              next
                case c_senc
                solve( !KU( KDF(<x^(x.1*~n.5), 'encryption'>) ) @ #vk.14 )
                  case c_KDF
                  solve( !KU( x^(x.1*~n.5) ) @ #vk.16 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.1 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case c_exp
                    by solve( !KU( ~n.5 ) @ #vk.20 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_18
        solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x^inv((x.1*~n.6)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.10 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.13 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<z^~n.4, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.2 )
              case c_aenc
              solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.3)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( z^~n.4 ) @ #vk.9 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.15 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_1
        solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_1
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.9 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.12 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>)
                     ) @ #vk.9 )
                case c_KDF
                solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.6 )
                  case c_aenc
                  solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.13 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<z^~n.4, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.2 )
              case U_2_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( senc('sendmeyourtoken',
                               KDF(<adec(g_x_enc, ~n.3)^~n.5, 'encryption'>))
                     ) @ #vk.3 )
                case S_3_send_case_1
                by contradiction /* non-normal terms */
              next
                case S_3_send_case_2
                solve( !KU( z^~n.4 ) @ #vk.9 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.14 )
                qed
              next
                case c_senc
                solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.5, 'encryption'>)
                       ) @ #vk.14 )
                  case c_KDF
                  solve( !KU( z^~n.4 ) @ #vk.10 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.17 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.17 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_2
        solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_1
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.6, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<g_x^~n.6, 'encryption'>) ) @ #vk.9 )
                case c_KDF
                solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                  case S_1_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.6 )
                    case c_aenc
                    solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.15 )
                      case S_1_send___VARIANT_1
                      by solve( !KU( ~n.3 ) @ #vk.17 )
                    next
                      case c_exp
                      by solve( !KU( ~n.4 ) @ #vk.18 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<z^~n.4, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.2 )
              case U_2_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.5, 'encryption'>))
                     ) @ #vk.3 )
                case S_3_send_case_1
                by contradiction /* non-normal terms */
              next
                case S_3_send_case_2
                solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                  case S_1_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( z^~n.4 ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              next
                case c_senc
                solve( !KU( KDF(<g_x^~n.5, 'encryption'>) ) @ #vk.14 )
                  case c_KDF
                  solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.5 )
                    case S_1_send___VARIANT_1
                    by contradiction /* non-normal terms */
                  next
                    case c_aenc
                    solve( !KU( z^~n.4 ) @ #vk.10 )
                      case S_1_send___VARIANT_1
                      by solve( !KU( ~n.3 ) @ #vk.19 )
                    next
                      case c_exp
                      by solve( !KU( ~n.4 ) @ #vk.19 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_23
        solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x^(x.1*inv(~n.6)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*inv(~n.6)) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<z^~n.4, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.2 )
              case c_aenc
              solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.3)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.13 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.19 )
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_37
        solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x^(x.1*inv((x.2*~n.6))), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*inv((x.2*~n.6))) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.16 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<z^~n.4, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.2 )
              case c_aenc
              solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.3)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.13 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.21 )
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_6
        solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.4, 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_6
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( aenc(z.1^inv(~n.6), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(z^(~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( z^(~n.4*inv(~n.7)) ) @ #vk.10 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.13 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<z^~n.4, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.2 )
              case U_2_send___VARIANT_6
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( aenc(z.1^inv(~n.5), pk(~n.3)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( z^~n.4 ) @ #vk.9 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.15 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case S_3_send_case_3
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send
        by contradiction /* from formulas */
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_15
        solve( !KU( aenc(z^inv(~n.5), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc('sendmeyourtoken',
                           KDF(<x^(x.1*~n.4), 'encryption'>))
                 ) @ #vk.2 )
            case S_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case S_3_send_case_2
            solve( !KU( aenc(x^~x.1, pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( z^inv(~n.5) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.11 )
              qed
            qed
          next
            case S_3_send_case_3
            solve( !KU( aenc(x^(x.1*~n.5), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*~n.5) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.12 )
              qed
            qed
          next
            case S_3_send_case_4
            solve( !KU( aenc(x^x.1, pk(~n.3)) ) @ #vk.3 )
              case S_1_send___VARIANT_1
              solve( !KU( z^inv(~n.5) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.9 )
              qed
            next
              case c_aenc
              solve( !KU( z^inv(~n.5) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.11 )
              qed
            qed
          next
            case S_3_send_case_5
            solve( !KU( aenc(x^inv(x.1), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( z^inv(~n.5) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.11 )
              qed
            qed
          next
            case S_3_send_case_6
            solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( z^inv(~n.5) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.11 )
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<x^(x.1*~n.4), 'encryption'>) ) @ #vk.7 )
              case c_KDF
              solve( !KU( x^(x.1*~n.4) ) @ #vk.9 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.1 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_3
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.14 )
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_18
        solve( !KU( aenc(z^inv(~n.4), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( z^inv(~n.4) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_1
        solve( !KU( aenc(z^inv(~n.5), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc('sendmeyourtoken',
                           KDF(<adec(g_x_enc, ~n.3)^~n.4, 'encryption'>))
                 ) @ #vk.2 )
            case S_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case S_3_send_case_2
            solve( !KU( z^inv(~n.5) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.9 )
            qed
          next
            case c_senc
            solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.4, 'encryption'>)
                   ) @ #vk.7 )
              case c_KDF
              solve( !KU( z^inv(~n.5) ) @ #vk.5 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_2
        solve( !KU( aenc(z^inv(~n.5), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.4, 'encryption'>))
                 ) @ #vk.2 )
            case S_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case S_3_send_case_2
            solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.3 )
              case S_1_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( z^inv(~n.5) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.11 )
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<g_x^~n.4, 'encryption'>) ) @ #vk.7 )
              case c_KDF
              solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                case S_1_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( z^inv(~n.5) ) @ #vk.5 )
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.15 )
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_23
        solve( !KU( aenc(z^inv(~n.4), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_37
        solve( !KU( aenc(z^inv(~n.4), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.14 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_6
        solve( !KU( aenc(z^inv(~n.4), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(z.1^inv(~n.5), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( z^inv(~n.4) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        qed
      qed
    qed
  next
    case S_3_send_case_4
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send
        by contradiction /* from formulas */
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_15
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<x^(x.1*~n.4), 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_15
            by contradiction /* from formulas */
          next
            case c_aenc
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<x.2^(x.3*~n.6), 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x.2^~x.3, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                by contradiction /* from formulas */
              next
                case c_aenc
                solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.6 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.9 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case S_3_send_case_3
              solve( !KU( aenc(x.2^(x.3*~n.7), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x.2^(x.3*~n.7) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.15 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.7 ) @ #vk.14 )
                qed
              qed
            next
              case S_3_send_case_4
              solve( !KU( aenc(x.2^x.3, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.5 )
                  case S_1_send___VARIANT_1
                  by contradiction /* from formulas */
                next
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.6 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.9 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.12 )
                  qed
                qed
              next
                case c_aenc
                solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.6 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.9 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case S_3_send_case_5
              solve( !KU( aenc(x.2^inv(x.3), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.6 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.9 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case S_3_send_case_6
              solve( !KU( aenc(x.2^(x.3*inv(x.4)), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.6 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.9 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x.2^(x.3*~n.6), 'encryption'>) ) @ #vk.9 )
                case c_KDF
                solve( !KU( x.2^(x.3*~n.6) ) @ #vk.11 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.13 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.1 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.11 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.16 )
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.5), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.5) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.10 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.11 )
            qed
          qed
        next
          case U_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_15
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<x^(x.1*~n.5), 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x^~x.1, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                by contradiction /* from formulas */
              next
                case c_aenc
                solve( !KU( aenc('g'^(~n.4*~n.5*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.4*~n.5*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.1 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.13 )
                  qed
                qed
              qed
            next
              case S_3_send_case_3
              solve( !KU( aenc(x^(x.1*~n.7), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x^(x.1*~n.7) ) @ #vk.7 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.16 ) @ #vk.9 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case c_exp
                  by solve( !KU( ~n.7 ) @ #vk.12 )
                qed
              qed
            next
              case S_3_send_case_4
              solve( !KU( aenc(x^x.1, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                by contradiction /* from formulas */
              next
                case c_aenc
                solve( !KU( aenc('g'^(~n.4*~n.5*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.4*~n.5*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.1 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.13 )
                  qed
                qed
              qed
            next
              case S_3_send_case_5
              solve( !KU( aenc(x^inv(x.1), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc('g'^(~n.4*~n.5*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.4*~n.5*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.1 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.13 )
                  qed
                qed
              qed
            next
              case S_3_send_case_6
              solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc('g'^(~n.4*~n.5*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.4*~n.5*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.1 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.13 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x^(x.1*~n.5), 'encryption'>) ) @ #vk.7 )
                case c_KDF
                solve( !KU( x^(x.1*~n.5) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.1 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.13 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.13 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.13 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.13 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.13 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.13 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.14 )
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<x.2^(x.3*~n.6), 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x.2^~x.3, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                by contradiction /* from formulas */
              next
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case S_3_send_case_3
              solve( !KU( aenc(x.2^(x.3*~n.7), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x.2^(x.3*~n.7) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.7 ) @ #vk.14 )
                qed
              qed
            next
              case S_3_send_case_4
              solve( !KU( aenc(x.2^x.3, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.11 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.14 )
                  qed
                qed
              next
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case S_3_send_case_5
              solve( !KU( aenc(x.2^inv(x.3), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case S_3_send_case_6
              solve( !KU( aenc(x.2^(x.3*inv(x.4)), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x.2^(x.3*~n.6), 'encryption'>) ) @ #vk.9 )
                case c_KDF
                solve( !KU( x.2^(x.3*~n.6) ) @ #vk.11 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.1 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.16 )
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<x.2^(x.3*~n.6), 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x.2^~x.3, pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.15 )
                  qed
                qed
              qed
            next
              case S_3_send_case_3
              solve( !KU( aenc(x.2^(x.3*~n.7), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x.2^(x.3*~n.7) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.7 ) @ #vk.14 )
                qed
              qed
            next
              case S_3_send_case_4
              solve( !KU( aenc(x.2^x.3, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.13 )
                  qed
                qed
              next
                case c_aenc
                solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.15 )
                  qed
                qed
              qed
            next
              case S_3_send_case_5
              solve( !KU( aenc(x.2^inv(x.3), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.15 )
                  qed
                qed
              qed
            next
              case S_3_send_case_6
              solve( !KU( aenc(x.2^(x.3*inv(x.4)), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.15 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x.2^(x.3*~n.6), 'encryption'>) ) @ #vk.9 )
                case c_KDF
                solve( !KU( x.2^(x.3*~n.6) ) @ #vk.11 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.1 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.16 )
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<x.3^(x.4*~n.6), 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x.3^~x.4, pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                       ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case S_3_send_case_3
              solve( !KU( aenc(x.3^(x.4*~n.7), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x.3^(x.4*~n.7) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.7 ) @ #vk.14 )
                qed
              qed
            next
              case S_3_send_case_4
              solve( !KU( aenc(x.3^x.4, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                       ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.9 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.11 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.14 )
                  qed
                qed
              next
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                       ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case S_3_send_case_5
              solve( !KU( aenc(x.3^inv(x.4), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                       ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case S_3_send_case_6
              solve( !KU( aenc(x.3^(x.4*inv(x.5)), pk(~n.3)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                       ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x.3^(x.4*~n.6), 'encryption'>) ) @ #vk.9 )
                case c_KDF
                solve( !KU( x.3^(x.4*~n.6) ) @ #vk.11 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.1 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.16 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.4), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.4) ) @ #vk.9 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.3 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.14 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_18
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<x^(x.1*~n.4), 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^inv((x.3*~n.6)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^~x.1 ) @ #vk.6 )
                  case U_2_send___VARIANT_15
                  by solve( !KU( ~n.9 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~x.1 ) @ #vk.13 )
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.5), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.5) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.10 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.11 )
            qed
          qed
        next
          case U_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_18
            solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc('g'^(~n.4*~n.5*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( 'g'^(~n.4*~n.5*inv(~n.7)) ) @ #vk.8 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.10 )
                next
                  case U_2_send___VARIANT_18
                  by solve( !KU( ~n.1 ) @ #vk.10 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.12 )
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( aenc(x.2^inv((x.3*~n.6)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.10 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^inv((x.3*~n.6)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.10 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.14 )
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.3^inv((x.4*~n.6)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                     ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.10 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.4), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.4) ) @ #vk.9 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.3 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.14 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_1
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<x^(x.1*~n.4), 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^~x.1 ) @ #vk.6 )
                  case U_2_send___VARIANT_15
                  by solve( !KU( ~n.9 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~x.1 ) @ #vk.12 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>)
                     ) @ #vk.9 )
                case c_KDF
                solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.6 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.7 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.9 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.16 )
                  qed
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.5), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.5) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.10 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.11 )
            qed
          qed
        next
          case U_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_1
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<adec(g_x_enc, ~n.3)^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc('g'^(~n.4*~n.5*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( 'g'^(~n.4*~n.5*inv(~n.7)) ) @ #vk.7 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_1
                  by solve( !KU( ~n.1 ) @ #vk.9 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.11 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.5, 'encryption'>)
                     ) @ #vk.7 )
                case c_KDF
                solve( !KU( aenc('g'^(~n.4*~n.5*inv(~n.10)), pk(~n.8)) ) @ #vk.6 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.4*~n.5*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.1 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.15 )
                  qed
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.3 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.14 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>)
                     ) @ #vk.9 )
                case c_KDF
                solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.6 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.13 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.18 )
                  qed
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.9 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.13 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>)
                     ) @ #vk.9 )
                case c_KDF
                solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.6 )
                  case c_aenc
                  solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.13 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.17 )
                  qed
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc('sendmeyourtoken',
                             KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                     ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.3 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.14 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.6, 'encryption'>)
                     ) @ #vk.9 )
                case c_KDF
                solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                       ) @ #vk.6 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.13 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.18 )
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.4), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.4) ) @ #vk.9 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.3 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.14 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_2
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<x^(x.1*~n.4), 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.6, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.6 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.9 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<g_x^~n.6, 'encryption'>) ) @ #vk.9 )
                case c_KDF
                solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                  case S_1_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.6 )
                    case c_aenc
                    solve( !KU( x^~x.1 ) @ #vk.7 )
                      case U_2_send___VARIANT_15
                      by solve( !KU( ~n.9 ) @ #vk.17 )
                    next
                      case c_exp
                      by solve( !KU( ~x.1 ) @ #vk.18 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.5), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.5) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.10 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.11 )
            qed
          qed
        next
          case U_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_1
            solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc('g'^(~n.4*~n.5*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.4*~n.5*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.1 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.13 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<g_x^~n.5, 'encryption'>) ) @ #vk.7 )
                case c_KDF
                solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                  case S_1_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc('g'^(~n.4*~n.5*inv(~n.10)), pk(~n.8)) ) @ #vk.6 )
                    case c_aenc
                    solve( !KU( 'g'^(~n.4*~n.5*inv(~n.7)) ) @ #vk.13 )
                      case S_1_send___VARIANT_1
                      by solve( !KU( ~n.3 ) @ #vk.15 )
                    next
                      case U_2_send___VARIANT_1
                      by solve( !KU( ~n.1 ) @ #vk.15 )
                    next
                      case c_exp
                      by solve( !KU( ~n.4 ) @ #vk.17 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.6, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<g_x^~n.6, 'encryption'>) ) @ #vk.9 )
                case c_KDF
                solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                  case S_1_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.6 )
                    case c_aenc
                    solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.15 )
                      case S_1_send___VARIANT_1_case_1
                      by solve( !KU( ~n.3 ) @ #vk.17 )
                    next
                      case S_1_send___VARIANT_1_case_2
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case S_1_send___VARIANT_1_case_3
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_15_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_15_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_18_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_18_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_1_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_1_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_1_case_3
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_1_case_4
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_23_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_23_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_37_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_37_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_6_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_6_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case c_exp
                      by solve( !KU( ~n.4 ) @ #vk.20 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.6, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.15 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<g_x^~n.6, 'encryption'>) ) @ #vk.9 )
                case c_KDF
                solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                  case S_1_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.6 )
                    case c_aenc
                    solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.15 )
                      case S_1_send___VARIANT_1
                      by solve( !KU( ~n.3 ) @ #vk.17 )
                    next
                      case c_exp
                      by solve( !KU( ~n.4 ) @ #vk.19 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.6, 'encryption'>))
                   ) @ #vk.2 )
              case S_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case S_3_send_case_2
              solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.3 )
                case S_1_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                       ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.4 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<g_x^~n.6, 'encryption'>) ) @ #vk.9 )
                case c_KDF
                solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                  case S_1_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                         ) @ #vk.6 )
                    case c_aenc
                    solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.15 )
                      case S_1_send___VARIANT_1_case_1
                      by solve( !KU( ~n.3 ) @ #vk.17 )
                    next
                      case S_1_send___VARIANT_1_case_2
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case S_1_send___VARIANT_1_case_3
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_15_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_15_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_18_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_18_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_1_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_1_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_1_case_3
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_1_case_4
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_23_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_23_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_37_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_37_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_6_case_1
                      by solve( !KU( ~n.12 ) @ #vk.17 )
                    next
                      case U_2_send___VARIANT_6_case_2
                      by solve( !KU( ~n.13 ) @ #vk.17 )
                    next
                      case c_exp
                      by solve( !KU( ~n.4 ) @ #vk.20 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.4), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.4) ) @ #vk.9 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.3 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.14 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_23
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<x^(x.1*~n.4), 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv(~n.6)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv(~n.6)) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          qed
        next
          case U_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.5), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.5) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.10 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.11 )
            qed
          qed
        next
          case U_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_23
            solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.6 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.12 )
              qed
            qed
          next
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv(~n.6)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv(~n.6)) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          qed
        next
          case U_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv(~n.6)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv(~n.6)) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          qed
        next
          case U_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.3^(x.4*inv(~n.6)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.3^(x.4*inv(~n.6)) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.4), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.4) ) @ #vk.9 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.3 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.14 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_37
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<x^(x.1*~n.4), 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv((x.4*~n.6))), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv((x.4*~n.6))) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.16 )
              qed
            qed
          qed
        next
          case U_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.5), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.5) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.10 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.11 )
            qed
          qed
        next
          case U_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_37
            solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.6 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.8 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.8 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.14 )
              qed
            qed
          next
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv((x.4*~n.6))), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv((x.4*~n.6))) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.16 )
              qed
            qed
          qed
        next
          case U_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv((x.4*~n.6))), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv((x.4*~n.6))) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.16 )
              qed
            qed
          qed
        next
          case U_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.3^(x.4*inv((x.5*~n.6))), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.3^(x.4*inv((x.5*~n.6))) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.16 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.4), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.4) ) @ #vk.9 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.3 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.14 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_6
        solve( !KU( senc(<'mytoken:', H>,
                         KDF(<x^(x.1*~n.4), 'encryption'>))
               ) @ #vk )
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(z^inv(~n.6), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^~n.4, pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^~x.1 ) @ #vk.6 )
                  case U_2_send___VARIANT_15
                  by solve( !KU( ~n.9 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~x.1 ) @ #vk.13 )
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.5), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.5) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.10 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.12 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.13 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.11 )
            qed
          qed
        next
          case U_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case U_2_send___VARIANT_6
            solve( !KU( aenc(z^inv(~n.5), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc('g'^(~n.4*~n.5*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( 'g'^(~n.4*~n.5*inv(~n.7)) ) @ #vk.8 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.10 )
                next
                  case U_2_send___VARIANT_6
                  by solve( !KU( ~n.1 ) @ #vk.10 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.12 )
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( aenc(z^inv(~n.6), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(x.1*~n.4*inv(~n.10)), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^(x.1*~n.4*inv(~n.7)) ) @ #vk.10 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(z^inv(~n.6), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(~n.4*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^(~n.4*inv((x.1*~n.7))) ) @ #vk.10 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.14 )
                qed
              qed
            qed
          qed
        next
          case U_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(z^inv(~n.6), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(x.1*~n.4*inv((x.2*~n.10))), pk(~n.8))
                     ) @ #vk.5 )
                case c_aenc
                solve( !KU( x^(x.1*~n.4*inv((x.2*~n.7))) ) @ #vk.10 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.13 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.4), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.4) ) @ #vk.9 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.3 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.11 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.11 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.14 )
            qed
          qed
        qed
      qed
    qed
  next
    case S_3_send_case_5
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send
        by contradiction /* from formulas */
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_15
        solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc('sendmeyourtoken',
                           KDF(<x.2^(x.3*~n.4), 'encryption'>))
                 ) @ #vk.2 )
            case S_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case S_3_send_case_2
            solve( !KU( aenc(x.2^~x.3, pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          next
            case S_3_send_case_3
            solve( !KU( aenc(x.2^(x.3*~n.5), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*~n.5) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.12 )
              qed
            qed
          next
            case S_3_send_case_4
            solve( !KU( aenc(x.2^x.3, pk(~n.3)) ) @ #vk.3 )
              case S_1_send___VARIANT_1
              solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.11 )
              qed
            next
              case c_aenc
              solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          next
            case S_3_send_case_5
            solve( !KU( aenc(x.2^inv(x.3), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          next
            case S_3_send_case_6
            solve( !KU( aenc(x.2^(x.3*inv(x.4)), pk(~n.3)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<x.2^(x.3*~n.4), 'encryption'>) ) @ #vk.7 )
              case c_KDF
              solve( !KU( x.2^(x.3*~n.4) ) @ #vk.9 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.1 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_3
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.14 )
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_18
        solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x.2^inv((x.3*~n.5)), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^inv((x.1*~n.4)) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_1
        solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc('sendmeyourtoken',
                           KDF(<adec(g_x_enc, ~n.3)^~n.4, 'encryption'>))
                 ) @ #vk.2 )
            case S_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case S_3_send_case_2
            solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.11 )
            qed
          next
            case c_senc
            solve( !KU( KDF(<adec(g_x_enc, ~n.3)^~n.4, 'encryption'>)
                   ) @ #vk.7 )
              case c_KDF
              solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.5 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.15 )
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_2
        solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.4, 'encryption'>))
                 ) @ #vk.2 )
            case S_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case S_3_send_case_2
            solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.3 )
              case S_1_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<g_x^~n.4, 'encryption'>) ) @ #vk.7 )
              case c_KDF
              solve( !KU( aenc(g_x, pk(~n.3)) ) @ #vk.4 )
                case S_1_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.5 )
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.17 )
                qed
              qed
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_23
        solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x.2^(x.3*inv(~n.5)), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x.2^(x.3*inv(~n.5)) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_37
        solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x.2^(x.3*inv((x.4*~n.5))), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x.2^(x.3*inv((x.4*~n.5))) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.14 )
            qed
          qed
        qed
      next
        case U_2_send___VARIANT_6
        solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(z^inv(~n.5), pk(~n.3)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^inv((x.1*~n.4)) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.12 )
            qed
          qed
        qed
      qed
    qed
  next
    case S_3_send_case_6
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send
        by contradiction /* from formulas */
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_15
        solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.10 )
          qed
        qed
      next
        case U_2_send___VARIANT_18
        solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.4)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.10 )
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_1
        solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.10 )
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_2
        solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.10 )
          qed
        qed
      next
        case U_2_send___VARIANT_23
        solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.4)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.10 )
          qed
        qed
      next
        case U_2_send___VARIANT_37
        solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.4)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.10 )
          qed
        qed
      next
        case U_2_send___VARIANT_6
        solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.4)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.10 )
          qed
        qed
      qed
    qed
  next
    case S_3_send_case_7
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send
        by contradiction /* from formulas */
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_15
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.12 )
          qed
        qed
      next
        case U_2_send___VARIANT_18
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.4))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.12 )
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_1
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.12 )
          qed
        qed
      next
        case U_2_send___VARIANT_1_case_2
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.12 )
          qed
        qed
      next
        case U_2_send___VARIANT_23
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.4))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.12 )
          qed
        qed
      next
        case U_2_send___VARIANT_37
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.4))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.12 )
          qed
        qed
      next
        case U_2_send___VARIANT_6
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.4))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.12 )
          qed
        qed
      qed
    qed
  qed
next
  case U_3_receive
  solve( St_U_3( S, id, ltkU, pkltkS, S.1, K1 ) ▶₀ #i )
    case U_2_send___VARIANT_15
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send_case_1
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<x^(x.1*~n.3), 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x^~n.3, pk(~n.8)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^~x.1 ) @ #vk.5 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.10 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~x.1 ) @ #vk.12 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>)
                     ) @ #vk.8 )
                case c_KDF
                solve( !KU( aenc(x^~n.3, pk(~n.7)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.6 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.9 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.17 )
                  qed
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.4), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.4) ) @ #vk.5 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.10 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        next
          case S_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<adec(g_y_enc, ~n.2)^~n.4, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc('g'^(~n.3*~n.4*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( 'g'^(~n.3*~n.4*inv(~n.7)) ) @ #vk.7 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.1 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_15
                  by solve( !KU( ~n.2 ) @ #vk.9 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.11 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.4, 'encryption'>)
                     ) @ #vk.6 )
                case c_KDF
                solve( !KU( aenc('g'^(~n.3*~n.4*inv(~n.10)), pk(~n.7)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.3*~n.4*inv(~n.6)) ) @ #vk.12 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.1 ) @ #vk.14 )
                  next
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.14 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x^(x.1*~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*~n.3*inv(~n.7)) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>)
                     ) @ #vk.8 )
                case c_KDF
                solve( !KU( aenc(x^(x.1*~n.3*inv(~n.10)), pk(~n.7)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv(~n.6)) ) @ #vk.14 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.19 )
                  qed
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x^(~n.3*inv((x.1*~n.11))), pk(~n.8)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(~n.3*inv((x.1*~n.7))) ) @ #vk.9 )
                  case U_2_send___VARIANT_15
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>)
                     ) @ #vk.8 )
                case c_KDF
                solve( !KU( aenc(x^(~n.3*inv((x.1*~n.10))), pk(~n.7)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(~n.3*inv((x.1*~n.6))) ) @ #vk.14 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.18 )
                  qed
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.11))), pk(~n.8))
                     ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*~n.3*inv((x.2*~n.7))) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>)
                     ) @ #vk.8 )
                case c_KDF
                solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.10))), pk(~n.7))
                       ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv((x.2*~n.6))) ) @ #vk.14 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.11 ) @ #vk.16 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.12 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.19 )
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.3), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.3) ) @ #vk.7 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.2 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case c_exp
              by solve( !KU( ~n.3 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case S_3_send_case_2
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<x^(x.1*~n.3), 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(x^~n.3, pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.5 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.10 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<z^~n.5, 'encryption'>) ) @ #vk.8 )
                case c_KDF
                solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.4 )
                  case U_2_send___VARIANT_15
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc(x^~n.3, pk(~n.7)) ) @ #vk.5 )
                    case c_aenc
                    solve( !KU( x^~x.1 ) @ #vk.6 )
                      case S_1_send___VARIANT_1
                      by solve( !KU( ~n.9 ) @ #vk.18 )
                    next
                      case c_exp
                      by solve( !KU( ~x.1 ) @ #vk.19 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.4), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.4) ) @ #vk.5 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.10 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        next
          case S_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.4, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc('g'^(~n.3*~n.4*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.3*~n.4*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.1 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<z^~n.4, 'encryption'>) ) @ #vk.6 )
                case c_KDF
                solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.4 )
                  case U_2_send___VARIANT_15
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc('g'^(~n.3*~n.4*inv(~n.10)), pk(~n.7)) ) @ #vk.5 )
                    case c_aenc
                    solve( !KU( 'g'^(~n.3*~n.4*inv(~n.6)) ) @ #vk.14 )
                      case S_1_send___VARIANT_1
                      by solve( !KU( ~n.1 ) @ #vk.16 )
                    next
                      case U_2_send___VARIANT_15
                      by solve( !KU( ~n.2 ) @ #vk.16 )
                    next
                      case c_exp
                      by solve( !KU( ~n.3 ) @ #vk.18 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<z^~n.5, 'encryption'>) ) @ #vk.8 )
                case c_KDF
                solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.4 )
                  case U_2_send___VARIANT_15
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc(x^(x.1*~n.3*inv(~n.10)), pk(~n.7)) ) @ #vk.5 )
                    case c_aenc
                    solve( !KU( x^(x.1*~n.3*inv(~n.6)) ) @ #vk.16 )
                      case S_1_send___VARIANT_1_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case S_1_send___VARIANT_1_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_15_case_1
                      by solve( !KU( ~n.2 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_15_case_2
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_15_case_3
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_18_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_18_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_1_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_1_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_1_case_3
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_1_case_4
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_23_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_23_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_37_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_37_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_6_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_6_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case c_exp
                      by solve( !KU( ~n.3 ) @ #vk.21 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(x^(~n.3*inv((x.1*~n.11))), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(~n.3*inv((x.1*~n.7))) ) @ #vk.11 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<z^~n.5, 'encryption'>) ) @ #vk.8 )
                case c_KDF
                solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.4 )
                  case U_2_send___VARIANT_15
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc(x^(~n.3*inv((x.1*~n.10))), pk(~n.7)) ) @ #vk.5 )
                    case c_aenc
                    solve( !KU( x^(~n.3*inv((x.1*~n.6))) ) @ #vk.16 )
                      case U_2_send___VARIANT_15
                      by solve( !KU( ~n.2 ) @ #vk.18 )
                    next
                      case c_exp
                      by solve( !KU( ~n.3 ) @ #vk.20 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.11))), pk(~n.8))
                       ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv((x.2*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<z^~n.5, 'encryption'>) ) @ #vk.8 )
                case c_KDF
                solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.4 )
                  case U_2_send___VARIANT_15
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.10))), pk(~n.7))
                         ) @ #vk.5 )
                    case c_aenc
                    solve( !KU( x^(x.1*~n.3*inv((x.2*~n.6))) ) @ #vk.16 )
                      case S_1_send___VARIANT_1_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case S_1_send___VARIANT_1_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_15_case_1
                      by solve( !KU( ~n.2 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_15_case_2
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_15_case_3
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_18_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_18_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_1_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_1_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_1_case_3
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_1_case_4
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_23_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_23_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_37_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_37_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_6_case_1
                      by solve( !KU( ~n.11 ) @ #vk.18 )
                    next
                      case U_2_send___VARIANT_6_case_2
                      by solve( !KU( ~n.12 ) @ #vk.18 )
                    next
                      case c_exp
                      by solve( !KU( ~n.3 ) @ #vk.21 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.3), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.3) ) @ #vk.7 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.2 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case c_exp
              by solve( !KU( ~n.3 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case S_3_send_case_3
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<x^(x.1*~n.3), 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(z^inv(~n.5), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^~n.3, pk(~n.7)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^~x.1 ) @ #vk.5 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.9 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~x.1 ) @ #vk.12 )
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.4), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.4) ) @ #vk.5 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.10 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        next
          case S_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            solve( !KU( aenc(z^inv(~n.4), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc('g'^(~n.3*~n.4*inv(~n.10)), pk(~n.7)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( 'g'^(~n.3*~n.4*inv(~n.6)) ) @ #vk.7 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.1 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_15
                  by solve( !KU( ~n.2 ) @ #vk.9 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.11 )
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( aenc(z^inv(~n.5), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(x.1*~n.3*inv(~n.10)), pk(~n.7)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*~n.3*inv(~n.6)) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(z^inv(~n.5), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(~n.3*inv((x.1*~n.10))), pk(~n.7)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(~n.3*inv((x.1*~n.6))) ) @ #vk.9 )
                  case U_2_send___VARIANT_15
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(z^inv(~n.5), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.10))), pk(~n.7))
                     ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*~n.3*inv((x.2*~n.6))) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.3), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.3) ) @ #vk.7 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.2 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case c_exp
              by solve( !KU( ~n.3 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case S_3_send_case_4
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<x^(x.1*~n.3), 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            by contradiction /* from formulas */
          next
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<x.2^(x.3*~n.5), 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x.2^~x.3, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                by contradiction /* from formulas */
              next
                case c_aenc
                solve( !KU( aenc(x^~n.3, pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.5 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.10 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case U_3_send_case_3
              solve( !KU( aenc(x.2^(x.3*~n.6), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x.2^(x.3*~n.6) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.14 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.16 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.14 )
                qed
              qed
            next
              case U_3_send_case_4
              solve( !KU( aenc(x.2^x.3, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                solve( !KU( aenc(x^~n.3, pk(~n.8)) ) @ #vk.4 )
                  case U_2_send___VARIANT_15
                  by contradiction /* from formulas */
                next
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.5 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.10 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.12 )
                  qed
                qed
              next
                case c_aenc
                solve( !KU( aenc(x^~n.3, pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.5 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.10 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case U_3_send_case_5
              solve( !KU( aenc(x.2^inv(x.3), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^~n.3, pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.5 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.10 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case U_3_send_case_6
              solve( !KU( aenc(x.2^(x.3*inv(x.4)), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^~n.3, pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^~x.1 ) @ #vk.5 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.10 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~x.1 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x.2^(x.3*~n.5), 'encryption'>) ) @ #vk.8 )
                case c_KDF
                solve( !KU( x.2^(x.3*~n.5) ) @ #vk.12 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.1 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.10 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.10 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.10 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.10 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.10 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.10 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.10 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.10 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.17 )
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.4), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.4) ) @ #vk.5 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.10 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        next
          case S_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<x^(x.1*~n.4), 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x^~x.1, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                by contradiction /* from formulas */
              next
                case c_aenc
                solve( !KU( aenc('g'^(~n.3*~n.4*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.3*~n.4*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.1 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  qed
                qed
              qed
            next
              case U_3_send_case_3
              solve( !KU( aenc(x^(x.1*~n.6), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x^(x.1*~n.6) ) @ #vk.7 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.15 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.9 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.12 )
                qed
              qed
            next
              case U_3_send_case_4
              solve( !KU( aenc(x^x.1, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                by contradiction /* from formulas */
              next
                case c_aenc
                solve( !KU( aenc('g'^(~n.3*~n.4*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.3*~n.4*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.1 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  qed
                qed
              qed
            next
              case U_3_send_case_5
              solve( !KU( aenc(x^inv(x.1), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc('g'^(~n.3*~n.4*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.3*~n.4*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.1 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  qed
                qed
              qed
            next
              case U_3_send_case_6
              solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc('g'^(~n.3*~n.4*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( 'g'^(~n.3*~n.4*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1
                    by solve( !KU( ~n.1 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x^(x.1*~n.4), 'encryption'>) ) @ #vk.6 )
                case c_KDF
                solve( !KU( x^(x.1*~n.4) ) @ #vk.10 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.1 ) @ #vk.12 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.11 ) @ #vk.12 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.11 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.12 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.12 )
                next
                  case c_exp
                  by solve( !KU( ~n.4 ) @ #vk.15 )
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<x.2^(x.3*~n.5), 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x.2^~x.3, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                by contradiction /* from formulas */
              next
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case U_3_send_case_3
              solve( !KU( aenc(x.2^(x.3*~n.6), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x.2^(x.3*~n.6) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.15 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.14 )
                qed
              qed
            next
              case U_3_send_case_4
              solve( !KU( aenc(x.2^x.3, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                solve( !KU( aenc(x^(x.1*~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv(~n.7)) ) @ #vk.9 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.14 )
                  qed
                qed
              next
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case U_3_send_case_5
              solve( !KU( aenc(x.2^inv(x.3), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case U_3_send_case_6
              solve( !KU( aenc(x.2^(x.3*inv(x.4)), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv(~n.7)) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x.2^(x.3*~n.5), 'encryption'>) ) @ #vk.8 )
                case c_KDF
                solve( !KU( x.2^(x.3*~n.5) ) @ #vk.12 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.1 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.17 )
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<x.2^(x.3*~n.5), 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x.2^~x.3, pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(~n.3*inv((x.1*~n.11))), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(~n.3*inv((x.1*~n.7))) ) @ #vk.11 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  qed
                qed
              qed
            next
              case U_3_send_case_3
              solve( !KU( aenc(x.2^(x.3*~n.6), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x.2^(x.3*~n.6) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.15 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.14 )
                qed
              qed
            next
              case U_3_send_case_4
              solve( !KU( aenc(x.2^x.3, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                solve( !KU( aenc(x^(~n.3*inv((x.1*~n.11))), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(~n.3*inv((x.1*~n.7))) ) @ #vk.9 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  qed
                qed
              next
                case c_aenc
                solve( !KU( aenc(x^(~n.3*inv((x.1*~n.11))), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(~n.3*inv((x.1*~n.7))) ) @ #vk.11 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  qed
                qed
              qed
            next
              case U_3_send_case_5
              solve( !KU( aenc(x.2^inv(x.3), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(~n.3*inv((x.1*~n.11))), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(~n.3*inv((x.1*~n.7))) ) @ #vk.11 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  qed
                qed
              qed
            next
              case U_3_send_case_6
              solve( !KU( aenc(x.2^(x.3*inv(x.4)), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(~n.3*inv((x.1*~n.11))), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(~n.3*inv((x.1*~n.7))) ) @ #vk.11 )
                    case U_2_send___VARIANT_15
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x.2^(x.3*~n.5), 'encryption'>) ) @ #vk.8 )
                case c_KDF
                solve( !KU( x.2^(x.3*~n.5) ) @ #vk.12 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.1 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.17 )
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<x.3^(x.4*~n.5), 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x.3^~x.4, pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.11))), pk(~n.8))
                       ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv((x.2*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.16 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case U_3_send_case_3
              solve( !KU( aenc(x.3^(x.4*~n.6), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x.3^(x.4*~n.6) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.15 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.14 )
                qed
              qed
            next
              case U_3_send_case_4
              solve( !KU( aenc(x.3^x.4, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_15
                solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.11))), pk(~n.8))
                       ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv((x.2*~n.7))) ) @ #vk.9 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.11 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.14 )
                  qed
                qed
              next
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.11))), pk(~n.8))
                       ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv((x.2*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case U_3_send_case_5
              solve( !KU( aenc(x.3^inv(x.4), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.11))), pk(~n.8))
                       ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv((x.2*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case U_3_send_case_6
              solve( !KU( aenc(x.3^(x.4*inv(x.5)), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.11))), pk(~n.8))
                       ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.3*inv((x.2*~n.7))) ) @ #vk.11 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.17 ) @ #vk.13 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.18 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.16 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x.3^(x.4*~n.5), 'encryption'>) ) @ #vk.8 )
                case c_KDF
                solve( !KU( x.3^(x.4*~n.5) ) @ #vk.12 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.1 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.17 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.3), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.3) ) @ #vk.7 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.2 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case c_exp
              by solve( !KU( ~n.3 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case S_3_send_case_5
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<x^(x.1*~n.3), 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^inv((x.3*~n.5)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^~n.3, pk(~n.7)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^~x.1 ) @ #vk.5 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.9 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~x.1 ) @ #vk.12 )
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.4), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.4) ) @ #vk.5 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.10 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        next
          case S_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc('g'^(~n.3*~n.4*inv(~n.10)), pk(~n.7)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( 'g'^(~n.3*~n.4*inv(~n.6)) ) @ #vk.7 )
                  case S_1_send___VARIANT_1
                  by solve( !KU( ~n.1 ) @ #vk.9 )
                next
                  case U_2_send___VARIANT_15
                  by solve( !KU( ~n.2 ) @ #vk.9 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.11 )
                qed
              qed
            qed
          next
            case c_aenc
            solve( !KU( aenc(x.2^inv((x.3*~n.5)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(x.1*~n.3*inv(~n.10)), pk(~n.7)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*~n.3*inv(~n.6)) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^inv((x.3*~n.5)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(~n.3*inv((x.1*~n.10))), pk(~n.7)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(~n.3*inv((x.1*~n.6))) ) @ #vk.9 )
                  case U_2_send___VARIANT_15
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              qed
            qed
          qed
        next
          case S_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.3^inv((x.4*~n.5)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(x^(x.1*~n.3*inv((x.2*~n.10))), pk(~n.7))
                     ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*~n.3*inv((x.2*~n.6))) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.3), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.3) ) @ #vk.7 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.2 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case c_exp
              by solve( !KU( ~n.3 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case S_3_send_case_6
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<x^(x.1*~n.3), 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv(~n.5)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv(~n.5)) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          qed
        next
          case S_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.4), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.4) ) @ #vk.5 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.10 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        next
          case S_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*inv(~n.4)) ) @ #vk.5 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.11 )
              qed
            qed
          next
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv(~n.5)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv(~n.5)) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          qed
        next
          case S_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv(~n.5)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv(~n.5)) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          qed
        next
          case S_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.3^(x.4*inv(~n.5)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.3^(x.4*inv(~n.5)) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.3), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.3) ) @ #vk.7 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.2 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case c_exp
              by solve( !KU( ~n.3 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case S_3_send_case_7
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<x^(x.1*~n.3), 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv((x.4*~n.5))), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv((x.4*~n.5))) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.10 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.15 )
              qed
            qed
          qed
        next
          case S_3_send_case_3
          solve( !KU( aenc(x^(x.1*~n.4), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( x^(x.1*~n.4) ) @ #vk.5 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.10 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        next
          case S_3_send_case_4
          solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*inv((x.2*~n.4))) ) @ #vk.5 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.7 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.7 )
              next
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.13 )
              qed
            qed
          next
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv((x.4*~n.5))), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv((x.4*~n.5))) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.15 )
              qed
            qed
          qed
        next
          case S_3_send_case_5
          solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.2^(x.3*inv((x.4*~n.5))), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*inv((x.4*~n.5))) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.15 )
              qed
            qed
          qed
        next
          case S_3_send_case_6
          solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.1 )
            case c_aenc
            solve( !KU( aenc(x.3^(x.4*inv((~n.5*x.5))), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.3^(x.4*inv((~n.5*x.5))) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.14 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<x^(x.1*~n.3), 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( x^(x.1*~n.3) ) @ #vk.7 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.2 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_15_case_3
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.9 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.9 )
            next
              case c_exp
              by solve( !KU( ~n.3 ) @ #vk.12 )
            qed
          qed
        qed
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_15
        by contradiction /* from formulas */
      qed
    qed
  next
    case U_2_send___VARIANT_18
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send_case_1
        solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc(<'mytoken:', H>,
                           KDF(<adec(g_y_enc, ~n.2)^~n.4, 'encryption'>))
                 ) @ #vk.2 )
            case U_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case U_3_send_case_2
            solve( !KU( x^inv((x.1*~n.6)) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.12 )
            qed
          next
            case c_senc
            solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.4, 'encryption'>)
                   ) @ #vk.7 )
              case c_KDF
              solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.5 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.17 )
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_2
        solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.4, 'encryption'>))
                 ) @ #vk.2 )
            case U_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case U_3_send_case_2
            solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^inv((x.1*~n.6)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<z^~n.4, 'encryption'>) ) @ #vk.7 )
              case c_KDF
              solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.5 )
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.19 )
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_3
        solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(z^inv(~n.5), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^inv((x.1*~n.4)) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case S_3_send_case_4
        solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc(<'mytoken:', H>,
                           KDF(<x.2^(x.3*~n.4), 'encryption'>))
                 ) @ #vk.2 )
            case U_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case U_3_send_case_2
            solve( !KU( aenc(x.2^~x.3, pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^inv((x.1*~n.6)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          next
            case U_3_send_case_3
            solve( !KU( aenc(x.2^(x.3*~n.5), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x.2^(x.3*~n.5) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.10 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_3
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          next
            case U_3_send_case_4
            solve( !KU( aenc(x.2^x.3, pk(~n.2)) ) @ #vk.3 )
              case U_2_send___VARIANT_18
              solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.12 )
              qed
            next
              case c_aenc
              solve( !KU( x^inv((x.1*~n.6)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          next
            case U_3_send_case_5
            solve( !KU( aenc(x.2^inv(x.3), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^inv((x.1*~n.6)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          next
            case U_3_send_case_6
            solve( !KU( aenc(x.2^(x.3*inv(x.4)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^inv((x.1*~n.6)) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.14 )
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<x.2^(x.3*~n.4), 'encryption'>) ) @ #vk.7 )
              case c_KDF
              solve( !KU( x.2^(x.3*~n.4) ) @ #vk.11 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.1 ) @ #vk.13 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case S_1_send___VARIANT_1_case_3
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.16 )
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_5
        solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x.2^inv((x.3*~n.5)), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^inv((x.1*~n.4)) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case S_3_send_case_6
        solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x.2^(x.3*inv(~n.5)), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x.2^(x.3*inv(~n.5)) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case S_3_send_case_7
        solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x.2^(x.3*inv((x.4*~n.5))), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x.2^(x.3*inv((x.4*~n.5))) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.14 )
            qed
          qed
        qed
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_18
        by contradiction /* from formulas */
      qed
    qed
  next
    case U_2_send___VARIANT_1_case_1
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send_case_1
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( senc(<'mytoken:', H>,
                           KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>))
                 ) @ #vk.2 )
            case U_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case U_3_send_case_2
            solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.11)), pk(~n.8))
                   ) @ #vk.4 )
              case c_aenc
              solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.7)) ) @ #vk.7 )
                case c_exp
                by solve( !KU( ~n.3 ) @ #vk.11 )
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>)
                   ) @ #vk.6 )
              case c_KDF
              solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.10)), pk(~n.7))
                     ) @ #vk.5 )
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.6)) ) @ #vk.12 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.16 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>))
                   ) @ #vk.3 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.7 )
                case c_exp
                by solve( !KU( ~n.3 ) @ #vk.12 )
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>)
                     ) @ #vk.10 )
                case c_KDF
                solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.8 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.16 )
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_2
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.5, 'encryption'>))
                 ) @ #vk.2 )
            case U_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case U_3_send_case_2
            solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.3 )
              case U_2_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.11)), pk(~n.8))
                     ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.7)) ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<z^~n.5, 'encryption'>) ) @ #vk.6 )
              case c_KDF
              solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.4 )
                case U_2_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.10)), pk(~n.7))
                       ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.6)) ) @ #vk.14 )
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.18 )
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.5, 'encryption'>))
                   ) @ #vk.3 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.4 )
                case U_2_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.7 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<z^~n.5, 'encryption'>) ) @ #vk.10 )
                case c_KDF
                solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.5 )
                  case U_2_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.8 )
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.18 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_3
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(z^inv(~n.5), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.10)), pk(~n.7))
                   ) @ #vk.4 )
              case c_aenc
              solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.6)) ) @ #vk.7 )
                case c_exp
                by solve( !KU( ~n.3 ) @ #vk.11 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(z^inv(~n.5), pk(~n.2)) ) @ #vk.4 )
              case c_aenc
              solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.7 )
                case c_exp
                by solve( !KU( ~n.3 ) @ #vk.12 )
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_4
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( senc(<'mytoken:', H>,
                           KDF(<x^(x.1*~n.5), 'encryption'>))
                 ) @ #vk.2 )
            case U_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case U_3_send_case_2
            solve( !KU( aenc(x^~x.1, pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.11)), pk(~n.8))
                     ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.7)) ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              qed
            qed
          next
            case U_3_send_case_3
            solve( !KU( aenc(x^(x.1*~n.6), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*~n.6) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.15 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_3
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.17 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.18 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.12 )
              qed
            qed
          next
            case U_3_send_case_4
            solve( !KU( aenc(x^x.1, pk(~n.2)) ) @ #vk.3 )
              case U_2_send___VARIANT_1
              solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.11)), pk(~n.8))
                     ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.7)) ) @ #vk.7 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.11 )
                qed
              qed
            next
              case c_aenc
              solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.11)), pk(~n.8))
                     ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.7)) ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              qed
            qed
          next
            case U_3_send_case_5
            solve( !KU( aenc(x^inv(x.1), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.11)), pk(~n.8))
                     ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.7)) ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              qed
            qed
          next
            case U_3_send_case_6
            solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.11)), pk(~n.8))
                     ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.7)) ) @ #vk.9 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<x^(x.1*~n.5), 'encryption'>) ) @ #vk.6 )
              case c_KDF
              solve( !KU( x^(x.1*~n.5) ) @ #vk.10 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.1 ) @ #vk.12 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.11 ) @ #vk.12 )
              next
                case S_1_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.12 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.12 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.15 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<x^(x.1*~n.5), 'encryption'>))
                   ) @ #vk.3 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x^~x.1, pk(~n.2)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.7 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            next
              case U_3_send_case_3
              solve( !KU( aenc(x^(x.1*~n.6), pk(~n.2)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*~n.6) ) @ #vk.11 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.10 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.12 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.13 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.16 )
                qed
              qed
            next
              case U_3_send_case_4
              solve( !KU( aenc(x^x.1, pk(~n.2)) ) @ #vk.4 )
                case U_2_send___VARIANT_1
                solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.7 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                qed
              next
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.7 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            next
              case U_3_send_case_5
              solve( !KU( aenc(x^inv(x.1), pk(~n.2)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.7 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            next
              case U_3_send_case_6
              solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.2)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.7 )
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.14 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x^(x.1*~n.5), 'encryption'>) ) @ #vk.10 )
                case c_KDF
                solve( !KU( x^(x.1*~n.5) ) @ #vk.14 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.1 ) @ #vk.15 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.6 ) @ #vk.15 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.7 ) @ #vk.15 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.18 )
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_5
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( aenc(adec(g_x_enc, ~n.1)^(~n.3*inv(~n.10)), pk(~n.7))
                   ) @ #vk.4 )
              case c_aenc
              solve( !KU( adec(g_x_enc, ~n.1)^(~n.3*inv(~n.6)) ) @ #vk.7 )
                case c_exp
                by solve( !KU( ~n.3 ) @ #vk.11 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.2)) ) @ #vk.4 )
              case c_aenc
              solve( !KU( adec(g_x_enc, ~n.1)^~n.3 ) @ #vk.7 )
                case c_exp
                by solve( !KU( ~n.3 ) @ #vk.12 )
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_6
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.5 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.11 )
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.2)) ) @ #vk.4 )
              case c_aenc
              solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.9 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.15 )
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_7
        solve( !KU( senc('sendmeyourtoken',
                         KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.5 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.11 ) @ #vk.7 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.12 ) @ #vk.7 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.13 )
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>)
                 ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.2)) ) @ #vk.4 )
              case c_aenc
              solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.9 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.6 ) @ #vk.11 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.7 ) @ #vk.11 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.17 )
              qed
            qed
          qed
        qed
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_1
        by contradiction /* from formulas */
      qed
    qed
  next
    case U_2_send___VARIANT_1_case_2
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send_case_1
        solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(g_x^(~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( g_x^(~n.3*inv(~n.7)) ) @ #vk.9 )
                  case U_2_send___VARIANT_1
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>)
                     ) @ #vk.8 )
                case c_KDF
                solve( !KU( aenc(g_x^(~n.3*inv(~n.10)), pk(~n.7)) ) @ #vk.5 )
                  case c_aenc
                  solve( !KU( g_x^(~n.3*inv(~n.6)) ) @ #vk.14 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.16 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.17 )
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<g_x^~n.3, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.2 )
              case S_1_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( senc(<'mytoken:', H>,
                               KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>))
                     ) @ #vk.3 )
                case U_3_send_case_1
                by contradiction /* non-normal terms */
              next
                case U_3_send_case_2
                solve( !KU( g_x^~n.3 ) @ #vk.7 )
                  case U_2_send___VARIANT_1
                  by solve( !KU( ~n.2 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              next
                case c_senc
                solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.5, 'encryption'>)
                       ) @ #vk.12 )
                  case c_KDF
                  solve( !KU( g_x^~n.3 ) @ #vk.8 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.17 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.17 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_2
        solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.5, 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_1
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( aenc(g_x^(~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( g_x^(~n.3*inv(~n.7)) ) @ #vk.11 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<z^~n.5, 'encryption'>) ) @ #vk.8 )
                case c_KDF
                solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.4 )
                  case U_2_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( aenc(g_x^(~n.3*inv(~n.10)), pk(~n.7)) ) @ #vk.5 )
                    case c_aenc
                    solve( !KU( g_x^(~n.3*inv(~n.6)) ) @ #vk.16 )
                      case U_2_send___VARIANT_1
                      by solve( !KU( ~n.2 ) @ #vk.18 )
                    next
                      case c_exp
                      by solve( !KU( ~n.3 ) @ #vk.19 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<g_x^~n.3, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.2 )
              case S_1_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( senc(<'mytoken:', H>, KDF(<z^~n.5, 'encryption'>))
                     ) @ #vk.3 )
                case U_3_send_case_1
                by contradiction /* non-normal terms */
              next
                case U_3_send_case_2
                solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.4 )
                  case U_2_send___VARIANT_1
                  by contradiction /* non-normal terms */
                next
                  case c_aenc
                  solve( !KU( g_x^~n.3 ) @ #vk.7 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  qed
                qed
              next
                case c_senc
                solve( !KU( KDF(<z^~n.5, 'encryption'>) ) @ #vk.12 )
                  case c_KDF
                  solve( !KU( aenc(z, pk(~n.2)) ) @ #vk.5 )
                    case U_2_send___VARIANT_1
                    by contradiction /* non-normal terms */
                  next
                    case c_aenc
                    solve( !KU( g_x^~n.3 ) @ #vk.8 )
                      case U_2_send___VARIANT_1
                      by solve( !KU( ~n.2 ) @ #vk.19 )
                    next
                      case c_exp
                      by solve( !KU( ~n.3 ) @ #vk.19 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_3
        solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( aenc(z^inv(~n.5), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(g_x^(~n.3*inv(~n.10)), pk(~n.7)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( g_x^(~n.3*inv(~n.6)) ) @ #vk.9 )
                  case U_2_send___VARIANT_1
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<g_x^~n.3, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.2 )
              case S_1_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( aenc(z^inv(~n.5), pk(~n.2)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( g_x^~n.3 ) @ #vk.7 )
                  case U_2_send___VARIANT_1
                  by solve( !KU( ~n.2 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_4
        solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( senc(<'mytoken:', H>,
                             KDF(<x^(x.1*~n.5), 'encryption'>))
                   ) @ #vk.2 )
              case U_3_send_case_1
              by contradiction /* non-normal terms */
            next
              case U_3_send_case_2
              solve( !KU( aenc(x^~x.1, pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(g_x^(~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( g_x^(~n.3*inv(~n.7)) ) @ #vk.11 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case U_3_send_case_3
              solve( !KU( aenc(x^(x.1*~n.6), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( x^(x.1*~n.6) ) @ #vk.9 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.15 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_15_case_3
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.17 ) @ #vk.11 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.18 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.6 ) @ #vk.14 )
                qed
              qed
            next
              case U_3_send_case_4
              solve( !KU( aenc(x^x.1, pk(~n.2)) ) @ #vk.3 )
                case U_2_send___VARIANT_1
                solve( !KU( aenc(g_x^(~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( g_x^(~n.3*inv(~n.7)) ) @ #vk.9 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.11 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.12 )
                  qed
                qed
              next
                case c_aenc
                solve( !KU( aenc(g_x^(~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( g_x^(~n.3*inv(~n.7)) ) @ #vk.11 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case U_3_send_case_5
              solve( !KU( aenc(x^inv(x.1), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(g_x^(~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( g_x^(~n.3*inv(~n.7)) ) @ #vk.11 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case U_3_send_case_6
              solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.2)) ) @ #vk.3 )
                case c_aenc
                solve( !KU( aenc(g_x^(~n.3*inv(~n.11)), pk(~n.8)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( g_x^(~n.3*inv(~n.7)) ) @ #vk.11 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.14 )
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( KDF(<x^(x.1*~n.5), 'encryption'>) ) @ #vk.8 )
                case c_KDF
                solve( !KU( x^(x.1*~n.5) ) @ #vk.12 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.1 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case S_1_send___VARIANT_1_case_3
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.11 ) @ #vk.14 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.12 ) @ #vk.14 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.17 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<g_x^~n.3, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.2 )
              case S_1_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( senc(<'mytoken:', H>,
                               KDF(<x^(x.1*~n.5), 'encryption'>))
                     ) @ #vk.3 )
                case U_3_send_case_1
                by contradiction /* non-normal terms */
              next
                case U_3_send_case_2
                solve( !KU( aenc(x^~x.1, pk(~n.2)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( g_x^~n.3 ) @ #vk.7 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  qed
                qed
              next
                case U_3_send_case_3
                solve( !KU( aenc(x^(x.1*~n.6), pk(~n.2)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( x^(x.1*~n.6) ) @ #vk.13 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.10 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_15_case_3
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.12 ) @ #vk.15 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.13 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~n.6 ) @ #vk.18 )
                  qed
                qed
              next
                case U_3_send_case_4
                solve( !KU( aenc(x^x.1, pk(~n.2)) ) @ #vk.4 )
                  case U_2_send___VARIANT_1
                  solve( !KU( g_x^~n.3 ) @ #vk.7 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.13 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.13 )
                  qed
                next
                  case c_aenc
                  solve( !KU( g_x^~n.3 ) @ #vk.7 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  qed
                qed
              next
                case U_3_send_case_5
                solve( !KU( aenc(x^inv(x.1), pk(~n.2)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( g_x^~n.3 ) @ #vk.7 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  qed
                qed
              next
                case U_3_send_case_6
                solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.2)) ) @ #vk.4 )
                  case c_aenc
                  solve( !KU( g_x^~n.3 ) @ #vk.7 )
                    case U_2_send___VARIANT_1
                    by solve( !KU( ~n.2 ) @ #vk.15 )
                  next
                    case c_exp
                    by solve( !KU( ~n.3 ) @ #vk.15 )
                  qed
                qed
              next
                case c_senc
                solve( !KU( KDF(<x^(x.1*~n.5), 'encryption'>) ) @ #vk.12 )
                  case c_KDF
                  solve( !KU( x^(x.1*~n.5) ) @ #vk.16 )
                    case S_1_send___VARIANT_1_case_1
                    by solve( !KU( ~n.1 ) @ #vk.17 )
                  next
                    case S_1_send___VARIANT_1_case_2
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case S_1_send___VARIANT_1_case_3
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_15_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_15_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_18_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_18_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_1_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_1_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_1_case_3
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_1_case_4
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_23_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_23_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_37_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_37_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_6_case_1
                    by solve( !KU( ~n.6 ) @ #vk.17 )
                  next
                    case U_2_send___VARIANT_6_case_2
                    by solve( !KU( ~n.7 ) @ #vk.17 )
                  next
                    case c_exp
                    by solve( !KU( ~n.5 ) @ #vk.20 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_5
        solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( aenc(g_x^(~n.3*inv(~n.10)), pk(~n.7)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( g_x^(~n.3*inv(~n.6)) ) @ #vk.9 )
                  case U_2_send___VARIANT_1
                  by solve( !KU( ~n.2 ) @ #vk.11 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.12 )
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<g_x^~n.3, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.2 )
              case S_1_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.2)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( g_x^~n.3 ) @ #vk.7 )
                  case U_2_send___VARIANT_1
                  by solve( !KU( ~n.2 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.3 ) @ #vk.13 )
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_6
        solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<g_x^~n.3, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.2 )
              case S_1_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.2)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.11 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.17 )
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_7
        solve( !KU( senc('sendmeyourtoken', KDF(<g_x^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.1 )
            case S_1_send___VARIANT_1
            by contradiction /* non-normal terms */
          next
            case c_aenc
            solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.7 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.11 ) @ #vk.9 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.12 ) @ #vk.9 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.15 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( KDF(<g_x^~n.3, 'encryption'>) ) @ #vk.5 )
            case c_KDF
            solve( !KU( aenc(g_x, pk(~n.1)) ) @ #vk.2 )
              case S_1_send___VARIANT_1
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.2)) ) @ #vk.4 )
                case c_aenc
                solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.11 )
                  case S_1_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case S_1_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_15_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_18_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_3
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_1_case_4
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_23_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_37_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_1
                  by solve( !KU( ~n.6 ) @ #vk.13 )
                next
                  case U_2_send___VARIANT_6_case_2
                  by solve( !KU( ~n.7 ) @ #vk.13 )
                next
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.19 )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_1
        by contradiction /* from formulas */
      qed
    qed
  next
    case U_2_send___VARIANT_23
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send_case_1
        solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.10 )
          qed
        qed
      next
        case S_3_send_case_2
        solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.10 )
          qed
        qed
      next
        case S_3_send_case_3
        solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.4)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.10 )
          qed
        qed
      next
        case S_3_send_case_4
        solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.10 )
          qed
        qed
      next
        case S_3_send_case_5
        solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.4)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.10 )
          qed
        qed
      next
        case S_3_send_case_6
        solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.4)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.10 )
          qed
        qed
      next
        case S_3_send_case_7
        solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv(~n.4)) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.10 )
          qed
        qed
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_23
        by contradiction /* from formulas */
      qed
    qed
  next
    case U_2_send___VARIANT_37
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send_case_1
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.12 )
          qed
        qed
      next
        case S_3_send_case_2
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.12 )
          qed
        qed
      next
        case S_3_send_case_3
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.4))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.12 )
          qed
        qed
      next
        case S_3_send_case_4
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.12 )
          qed
        qed
      next
        case S_3_send_case_5
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.4))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.12 )
          qed
        qed
      next
        case S_3_send_case_6
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.4))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.12 )
          qed
        qed
      next
        case S_3_send_case_7
        solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( x^(x.1*inv((x.2*~n.4))) ) @ #vk.4 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.6 ) @ #vk.6 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.7 ) @ #vk.6 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.12 )
          qed
        qed
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_37
        by contradiction /* from formulas */
      qed
    qed
  next
    case U_2_send___VARIANT_6
    solve( SharedKey( U.1, ~n, K2 ) @ #j )
      case S_4_receive
      solve( St_S_4( U.1, ~n, ltkS, Kmac, pkltkU, U.2, K2 ) ▶₀ #j )
        case S_3_send_case_1
        solve( !KU( aenc(z^inv(~n.5), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc(<'mytoken:', H>,
                           KDF(<adec(g_y_enc, ~n.2)^~n.4, 'encryption'>))
                 ) @ #vk.2 )
            case U_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case U_3_send_case_2
            solve( !KU( z^inv(~n.6) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.10 )
            qed
          next
            case c_senc
            solve( !KU( KDF(<adec(g_y_enc, ~n.2)^~n.4, 'encryption'>)
                   ) @ #vk.7 )
              case c_KDF
              solve( !KU( z^inv(~n.5) ) @ #vk.5 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.15 )
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_2
        solve( !KU( aenc(z^inv(~n.5), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc(<'mytoken:', H>, KDF(<z.1^~n.4, 'encryption'>))
                 ) @ #vk.2 )
            case U_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case U_3_send_case_2
            solve( !KU( aenc(z.1, pk(~n.2)) ) @ #vk.3 )
              case U_2_send___VARIANT_6
              by contradiction /* non-normal terms */
            next
              case c_aenc
              solve( !KU( z^inv(~n.6) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.12 )
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<z.1^~n.4, 'encryption'>) ) @ #vk.7 )
              case c_KDF
              solve( !KU( aenc(z.1, pk(~n.2)) ) @ #vk.4 )
                case U_2_send___VARIANT_6
                by contradiction /* non-normal terms */
              next
                case c_aenc
                solve( !KU( z^inv(~n.5) ) @ #vk.5 )
                  case c_exp
                  by solve( !KU( ~n.5 ) @ #vk.17 )
                qed
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_3
        solve( !KU( aenc(z^inv(~n.4), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(z.1^inv(~n.5), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( z^inv(~n.4) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        qed
      next
        case S_3_send_case_4
        solve( !KU( aenc(z^inv(~n.5), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( senc(<'mytoken:', H>,
                           KDF(<x^(x.1*~n.4), 'encryption'>))
                 ) @ #vk.2 )
            case U_3_send_case_1
            by contradiction /* non-normal terms */
          next
            case U_3_send_case_2
            solve( !KU( aenc(x^~x.1, pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( z^inv(~n.6) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.12 )
              qed
            qed
          next
            case U_3_send_case_3
            solve( !KU( aenc(x^(x.1*~n.5), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( x^(x.1*~n.5) ) @ #vk.8 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.10 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_15_case_3
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.12 ) @ #vk.10 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.13 ) @ #vk.10 )
              next
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.13 )
              qed
            qed
          next
            case U_3_send_case_4
            solve( !KU( aenc(x^x.1, pk(~n.2)) ) @ #vk.3 )
              case U_2_send___VARIANT_6
              solve( !KU( z^inv(~n.5) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.5 ) @ #vk.10 )
              qed
            next
              case c_aenc
              solve( !KU( z^inv(~n.6) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.12 )
              qed
            qed
          next
            case U_3_send_case_5
            solve( !KU( aenc(x^inv(x.1), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( z^inv(~n.6) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.12 )
              qed
            qed
          next
            case U_3_send_case_6
            solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.2)) ) @ #vk.3 )
              case c_aenc
              solve( !KU( z^inv(~n.6) ) @ #vk.4 )
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.12 )
              qed
            qed
          next
            case c_senc
            solve( !KU( KDF(<x^(x.1*~n.4), 'encryption'>) ) @ #vk.7 )
              case c_KDF
              solve( !KU( x^(x.1*~n.4) ) @ #vk.11 )
                case S_1_send___VARIANT_1_case_1
                by solve( !KU( ~n.1 ) @ #vk.13 )
              next
                case S_1_send___VARIANT_1_case_2
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case S_1_send___VARIANT_1_case_3
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_15_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_15_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_18_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_18_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_3
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_1_case_4
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_23_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_23_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_37_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_37_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_6_case_1
                by solve( !KU( ~n.6 ) @ #vk.13 )
              next
                case U_2_send___VARIANT_6_case_2
                by solve( !KU( ~n.7 ) @ #vk.13 )
              next
                case c_exp
                by solve( !KU( ~n.4 ) @ #vk.16 )
              qed
            qed
          qed
        qed
      next
        case S_3_send_case_5
        solve( !KU( aenc(z^inv(~n.4), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x^inv((x.1*~n.5)), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( z^inv(~n.4) ) @ #vk.4 )
              case c_exp
              by solve( !KU( ~n.4 ) @ #vk.10 )
            qed
          qed
        qed
      next
        case S_3_send_case_6
        solve( !KU( aenc(z^inv(~n.4), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x^(x.1*inv(~n.5)), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.12 )
            qed
          qed
        qed
      next
        case S_3_send_case_7
        solve( !KU( aenc(z^inv(~n.4), pk(~n.1)) ) @ #vk.1 )
          case c_aenc
          solve( !KU( aenc(x^(x.1*inv((x.2*~n.5))), pk(~n.2)) ) @ #vk.3 )
            case c_aenc
            solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.6 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.6 ) @ #vk.8 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.7 ) @ #vk.8 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.14 )
            qed
          qed
        qed
      qed
    next
      case U_3_receive
      solve( St_U_3( U.1, ~n, ltkU, pkltkS, S.1, K2 ) ▶₀ #j )
        case U_2_send___VARIANT_6
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma security:
  all-traces
  "∀ S voucher_with_tag id #j.
    (FinishRedeemVoucher( S, id, voucher_with_tag ) @ #j) ⇒
    (∃ U #i. StartRedeemVoucher( U, S, id, voucher_with_tag ) @ #i)"
/*
guarded formula characterizing all counter-examples:
"∃ S voucher_with_tag id #j.
  (FinishRedeemVoucher( S, id, voucher_with_tag ) @ #j)
 ∧
  ∀ U #i.
   (StartRedeemVoucher( U, S, id, voucher_with_tag ) @ #i) ⇒ ⊥"
*/
simplify
solve( St_S_6( S, id, ltkS, Kmac ) ▶₀ #j )
  case S_5_send_case_1
  solve( !KU( MAC(<'Voucher', h(token)>, ~n.2) ) @ #vk.5 )
    case S_5_send
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>))
           ) @ #vk.8 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( ~n.3 ) @ #vk.8 )
        case U_6_send
        solve( !KU( adec(g_y_enc, ~n.1)^~n.4 ) @ #vk.11 )
          case c_exp
          by solve( !KU( ~n.4 ) @ #vk.17 )
        qed
      qed
    next
      case c_senc
      solve( !KU( adec(g_y_enc, ~n.1)^~n.3 ) @ #vk.12 )
        case c_exp
        by solve( !KU( ~n.3 ) @ #vk.16 )
      qed
    qed
  next
    case U_6_send
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.6*inv(~n.10)), pk(~n.8))
               ) @ #vk.11 )
          case c_aenc
          solve( !KU( adec(g_y_enc, ~n.1)^(~n.6*inv(~n.10)) ) @ #vk.14 )
            case c_exp
            by solve( !KU( ~n.6 ) @ #vk.18 )
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( KDF(<adec(g_y_enc, ~n.1)^~n.5, 'encryption'>)
             ) @ #vk.13 )
        case c_KDF
        solve( !KU( aenc(adec(g_y_enc, ~n.1)^(~n.5*inv(~n.9)), pk(~n.7))
               ) @ #vk.13 )
          case c_aenc
          solve( !KU( adec(g_y_enc, ~n.1)^(~n.5*inv(~n.9)) ) @ #vk.18 )
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.22 )
          qed
        qed
      qed
    qed
  next
    case c_MAC
    by solve( !KU( ~n.2 ) @ #vk.9 )
  qed
next
  case S_5_send_case_2
  solve( !KU( MAC(<'Voucher', h(token)>, ~n.2) ) @ #vk.5 )
    case S_5_send
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<z^~n.4, 'encryption'>))
           ) @ #vk.8 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( ~n.3 ) @ #vk.8 )
        case U_6_send
        solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.9 )
          case U_2_send___VARIANT_15
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_18
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_1_case_1
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_1_case_2
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_23
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_37
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_6
          by contradiction /* non-normal terms */
        next
          case c_aenc
          solve( !KU( z^~n.4 ) @ #vk.11 )
            case S_1_send___VARIANT_1
            by solve( !KU( ~n.5 ) @ #vk.18 )
          next
            case c_exp
            by solve( !KU( ~n.4 ) @ #vk.18 )
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.10 )
        case U_2_send___VARIANT_15
        by contradiction /* non-normal terms */
      next
        case U_2_send___VARIANT_18
        by contradiction /* non-normal terms */
      next
        case U_2_send___VARIANT_1_case_1
        by contradiction /* non-normal terms */
      next
        case U_2_send___VARIANT_1_case_2
        by contradiction /* non-normal terms */
      next
        case U_2_send___VARIANT_23
        by contradiction /* non-normal terms */
      next
        case U_2_send___VARIANT_37
        by contradiction /* non-normal terms */
      next
        case U_2_send___VARIANT_6
        by contradiction /* non-normal terms */
      next
        case c_aenc
        solve( !KU( z^~n.3 ) @ #vk.12 )
          case S_1_send___VARIANT_1
          by solve( !KU( ~n.4 ) @ #vk.17 )
        next
          case c_exp
          by solve( !KU( ~n.3 ) @ #vk.17 )
        qed
      qed
    qed
  next
    case U_6_send
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<z^~n.4, 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.8 )
          case U_2_send___VARIANT_15
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_18
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_1_case_1
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_1_case_2
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_23
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_37
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_6
          by contradiction /* non-normal terms */
        next
          case c_aenc
          solve( !KU( aenc(z^(~n.6*inv(~n.10)), pk(~n.8)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( z^(~n.6*inv(~n.10)) ) @ #vk.16 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.18 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.19 )
            qed
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( KDF(<z^~n.5, 'encryption'>) ) @ #vk.13 )
        case c_KDF
        solve( !KU( aenc(z, pk(~n.1)) ) @ #vk.10 )
          case U_2_send___VARIANT_15
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_18
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_1_case_1
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_1_case_2
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_23
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_37
          by contradiction /* non-normal terms */
        next
          case U_2_send___VARIANT_6
          by contradiction /* non-normal terms */
        next
          case c_aenc
          solve( !KU( aenc(z^(~n.5*inv(~n.9)), pk(~n.7)) ) @ #vk.13 )
            case c_aenc
            solve( !KU( z^(~n.5*inv(~n.9)) ) @ #vk.20 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.4 ) @ #vk.22 )
            next
              case c_exp
              by solve( !KU( ~n.5 ) @ #vk.23 )
            qed
          qed
        qed
      qed
    qed
  next
    case c_MAC
    by solve( !KU( ~n.2 ) @ #vk.9 )
  qed
next
  case S_5_send_case_3
  solve( !KU( MAC(<'Voucher', h(token)>, ~n.2) ) @ #vk.5 )
    case S_5_send
    solve( !KU( aenc(z^inv(~n.4), pk(~n.1)) ) @ #vk.9 )
      case c_aenc
      solve( !KU( z^inv(~n.4) ) @ #vk.13 )
        case c_exp
        by solve( !KU( ~n.4 ) @ #vk.16 )
      qed
    qed
  next
    case U_6_send
    solve( !KU( aenc(z^inv(~n.4), pk(~n.1)) ) @ #vk.8 )
      case c_aenc
      solve( !KU( aenc(z^inv(~n.9), pk(~n.7)) ) @ #vk.11 )
        case c_aenc
        solve( !KU( z^inv(~n.5) ) @ #vk.12 )
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.18 )
        qed
      qed
    qed
  next
    case c_MAC
    by solve( !KU( ~n.2 ) @ #vk.9 )
  qed
next
  case S_5_send_case_4
  solve( !KU( MAC(<'Voucher', h(token)>, ~n.2) ) @ #vk.5 )
    case S_5_send
    solve( !KU( x^(x.1*~n.4) ) @ #vk.11 )
      case S_1_send___VARIANT_1_case_1
      by solve( !KU( ~n.4 ) @ #vk.13 )
    next
      case S_1_send___VARIANT_1_case_2
      by solve( !KU( ~n.5 ) @ #vk.13 )
    next
      case S_1_send___VARIANT_1_case_3
      by solve( !KU( ~n.6 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_15_case_1
      by solve( !KU( ~n.5 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_15_case_2
      by solve( !KU( ~n.6 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_18_case_1
      by solve( !KU( ~n.5 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_18_case_2
      by solve( !KU( ~n.6 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_1_case_1
      by solve( !KU( ~n.5 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_1_case_2
      by solve( !KU( ~n.6 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_1_case_3
      by solve( !KU( ~n.5 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_1_case_4
      by solve( !KU( ~n.6 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_23_case_1
      by solve( !KU( ~n.5 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_23_case_2
      by solve( !KU( ~n.6 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_37_case_1
      by solve( !KU( ~n.5 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_37_case_2
      by solve( !KU( ~n.6 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_6_case_1
      by solve( !KU( ~n.5 ) @ #vk.13 )
    next
      case U_2_send___VARIANT_6_case_2
      by solve( !KU( ~n.6 ) @ #vk.13 )
    next
      case c_exp
      by solve( !KU( ~n.3 ) @ #vk.16 )
    qed
  next
    case U_6_send_case_1
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<x^(~n.4*~n.5), 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( aenc(x^~n.6, pk(~n.1)) ) @ #vk.8 )
        case U_2_send___VARIANT_15
        by contradiction /* from formulas */
      next
        case c_aenc
        solve( !KU( aenc(x^~n.5, pk(~n.8)) ) @ #vk.11 )
          case S_1_send___VARIANT_1
          by contradiction /* from formulas */
        next
          case c_aenc
          solve( !KU( x^~n.6 ) @ #vk.12 )
            case U_2_send___VARIANT_15
            by solve( !KU( ~n.9 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~n.6 ) @ #vk.17 )
          qed
        qed
      qed
    next
      case U_3_send_case_3
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^~n.7, pk(~n.1)) ) @ #vk.8 )
          case U_2_send___VARIANT_15
          by contradiction /* from formulas */
        next
          case c_aenc
          solve( !KU( aenc(x^~n.6, pk(~n.9)) ) @ #vk.11 )
            case S_1_send___VARIANT_1
            by contradiction /* from formulas */
          next
            case c_aenc
            solve( !KU( aenc(x^(~n.6*~n.7*inv(~n.15)), pk(~n.13)) ) @ #vk.12 )
              case c_aenc
              solve( !KU( x^(~n.6*~n.7*inv(~n.11)) ) @ #vk.18 )
                case S_1_send___VARIANT_1
                by solve( !KU( ~n.5 ) @ #vk.20 )
              next
                case U_2_send___VARIANT_15
                by solve( !KU( ~n.12 ) @ #vk.20 )
              next
                case c_exp
                by solve( !KU( ~n.6 ) @ #vk.22 )
              qed
            qed
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( KDF(<x^(~n.5*~n.6), 'encryption'>) ) @ #vk.13 )
        case c_KDF
        solve( !KU( x^(~n.5*~n.6) ) @ #vk.16 )
          case S_1_send___VARIANT_1
          by solve( !KU( ~n.4 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15
          by solve( !KU( ~n.9 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.20 )
        qed
      qed
    qed
  next
    case U_6_send_case_2
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<x^(x.1*~n.4*~n.5), 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( aenc(x^(x.1*~n.6), pk(~n.1)) ) @ #vk.8 )
        case c_aenc
        solve( !KU( x^(x.1*~n.6) ) @ #vk.12 )
          case S_1_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case S_1_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_15_case_1
          by solve( !KU( ~n.9 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_15_case_2
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_15_case_3
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_18_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_18_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_3
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_4
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_23_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_23_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_37_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_37_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_6_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_6_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case c_exp
          by solve( !KU( ~n.6 ) @ #vk.17 )
        qed
      qed
    next
      case U_3_send_case_3
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( splitEqs(1) )
          case split_case_1
          solve( !KU( aenc(x^(~x.1*~x.1), pk(~n.1)) ) @ #vk.8 )
            case c_aenc
            solve( !KU( x^(~x.1*~x.1) ) @ #vk.12 )
              case U_2_send___VARIANT_15
              by solve( !KU( ~n.7 ) @ #vk.14 )
            next
              case c_exp
              by solve( !KU( ~x.1 ) @ #vk.16 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( aenc(x^(~x.1*~x.3), pk(~n.1)) ) @ #vk.8 )
            case c_aenc
            solve( !KU( x^(~x.1*~x.3) ) @ #vk.14 )
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.8 ) @ #vk.16 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.12 ) @ #vk.16 )
            next
              case c_exp
              by solve( !KU( ~x.1 ) @ #vk.18 )
            qed
          qed
        qed
      qed
    next
      case U_3_send_case_4
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(x.1*~n.7*~n.8), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(x.1*~n.7*~n.8) ) @ #vk.16 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.15 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.11 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_3
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_4
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case c_exp
            by solve( !KU( ~n.7 ) @ #vk.21 )
          qed
        qed
      qed
    next
      case U_3_send_case_5
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(x.1*~n.7), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(x.1*~n.7) ) @ #vk.14 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.10 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_3
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~n.7 ) @ #vk.19 )
          qed
        qed
      qed
    next
      case U_3_send_case_6
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(~n.7*inv(x.1)), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(~n.7*inv(x.1)) ) @ #vk.14 )
            case U_2_send___VARIANT_15
            by solve( !KU( ~n.10 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~n.7 ) @ #vk.18 )
          qed
        qed
      qed
    next
      case U_3_send_case_7
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(x.1*~n.7*inv(x.2)), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(x.1*~n.7*inv(x.2)) ) @ #vk.14 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.10 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_3
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~n.7 ) @ #vk.19 )
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( KDF(<x^(x.1*~n.5*~n.6), 'encryption'>) ) @ #vk.13 )
        case c_KDF
        solve( !KU( x^(x.1*~n.5*~n.6) ) @ #vk.16 )
          case S_1_send___VARIANT_1_case_1
          by solve( !KU( ~n.4 ) @ #vk.18 )
        next
          case S_1_send___VARIANT_1_case_2
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case S_1_send___VARIANT_1_case_3
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_1
          by solve( !KU( ~n.9 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_2
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_3
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_18_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_18_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_3
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_4
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_23_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_23_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_37_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_37_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_6_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_6_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.21 )
        qed
      qed
    qed
  next
    case U_6_send_case_3
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<x^(x.1*~n.4), 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^~x.1, pk(~n.1)) ) @ #vk.8 )
          case U_2_send___VARIANT_15
          solve( !KU( aenc('g'^(~x*~n.6*inv(~n.10)), pk(~n.8)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( 'g'^(~x*~n.6*inv(~n.10)) ) @ #vk.14 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.16 )
            next
              case U_2_send___VARIANT_15
              by solve( !KU( ~n.1 ) @ #vk.16 )
            next
              case c_exp
              by solve( !KU( ~x ) @ #vk.18 )
            qed
          qed
        next
          case c_aenc
          solve( !KU( aenc(x^(~x.1*~n.6*inv(~n.10)), pk(~n.8)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( x^(~x.1*~n.6*inv(~n.10)) ) @ #vk.16 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_15
              by solve( !KU( ~n.14 ) @ #vk.18 )
            next
              case c_exp
              by solve( !KU( ~x.1 ) @ #vk.20 )
            qed
          qed
        qed
      qed
    next
      case U_3_send_case_3
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(x.1*~n.7), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(x.1*~n.7) ) @ #vk.16 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.15 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_3
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case c_exp
            by solve( !KU( ~n.7 ) @ #vk.21 )
          qed
        qed
      qed
    next
      case U_3_send_case_4
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^x.1, pk(~n.1)) ) @ #vk.8 )
          case U_2_send___VARIANT_15
          solve( !KU( aenc('g'^(~n.6*~n.7*inv(~n.11)), pk(~n.9)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( 'g'^(~n.6*~n.7*inv(~n.11)) ) @ #vk.15 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.17 )
            next
              case U_2_send___VARIANT_15
              by solve( !KU( ~n.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.19 )
            qed
          qed
        next
          case U_2_send___VARIANT_18
          solve( !KU( aenc('g'^(~n.6*~n.7*inv(~n.11)), pk(~n.9)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( 'g'^(~n.6*~n.7*inv(~n.11)) ) @ #vk.15 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.17 )
            next
              case U_2_send___VARIANT_18
              by solve( !KU( ~n.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.19 )
            qed
          qed
        next
          case U_2_send___VARIANT_1_case_1
          solve( !KU( aenc('g'^(~n.6*~n.7*inv(~n.11)), pk(~n.9)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( 'g'^(~n.6*~n.7*inv(~n.11)) ) @ #vk.15 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.17 )
            next
              case U_2_send___VARIANT_1
              by solve( !KU( ~n.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.19 )
            qed
          qed
        next
          case U_2_send___VARIANT_1_case_2
          solve( !KU( aenc('g'^(~n.6*~n.7*inv(~n.11)), pk(~n.9)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( 'g'^(~n.6*~n.7*inv(~n.11)) ) @ #vk.15 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.17 )
            next
              case U_2_send___VARIANT_1
              by solve( !KU( ~n.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.19 )
            qed
          qed
        next
          case U_2_send___VARIANT_23
          solve( !KU( aenc('g'^(~n.6*~n.7*inv(~n.11)), pk(~n.9)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( 'g'^(~n.6*~n.7*inv(~n.11)) ) @ #vk.15 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.17 )
            next
              case U_2_send___VARIANT_23
              by solve( !KU( ~n.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.19 )
            qed
          qed
        next
          case U_2_send___VARIANT_37
          solve( !KU( aenc('g'^(~n.6*~n.7*inv(~n.11)), pk(~n.9)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( 'g'^(~n.6*~n.7*inv(~n.11)) ) @ #vk.15 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.17 )
            next
              case U_2_send___VARIANT_37
              by solve( !KU( ~n.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.19 )
            qed
          qed
        next
          case U_2_send___VARIANT_6
          solve( !KU( aenc('g'^(~n.6*~n.7*inv(~n.11)), pk(~n.9)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( 'g'^(~n.6*~n.7*inv(~n.11)) ) @ #vk.15 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.17 )
            next
              case U_2_send___VARIANT_6
              by solve( !KU( ~n.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.19 )
            qed
          qed
        next
          case c_aenc
          solve( !KU( aenc(x^(x.1*~n.6*inv(~n.10)), pk(~n.8)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( x^(x.1*~n.6*inv(~n.10)) ) @ #vk.16 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.5 ) @ #vk.18 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.21 )
            qed
          qed
        qed
      qed
    next
      case U_3_send_case_5
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_6
      by contradiction /* non-normal terms */
    next
      case c_senc
      solve( !KU( KDF(<x^(x.1*~n.5), 'encryption'>) ) @ #vk.13 )
        case c_KDF
        solve( !KU( x^(x.1*~n.5) ) @ #vk.16 )
          case S_1_send___VARIANT_1_case_1
          by solve( !KU( ~n.4 ) @ #vk.18 )
        next
          case S_1_send___VARIANT_1_case_2
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case S_1_send___VARIANT_1_case_3
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_18_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_18_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_3
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_4
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_23_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_23_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_37_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_37_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_6_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_6_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.21 )
        qed
      qed
    qed
  next
    case U_6_send_case_4
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<x^(~n.4*inv(x.1)), 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_3
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^inv(x.1), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( aenc(x^(~n.6*inv((x.1*~n.10))), pk(~n.8)) ) @ #vk.11 )
            case c_aenc
            solve( !KU( x^(~n.6*inv((x.1*~n.10))) ) @ #vk.16 )
              case S_1_send___VARIANT_1
              by solve( !KU( ~n.5 ) @ #vk.18 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.20 )
            qed
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( KDF(<x^(~n.5*inv(x.1)), 'encryption'>) ) @ #vk.13 )
        case c_KDF
        solve( !KU( x^(~n.5*inv(x.1)) ) @ #vk.16 )
          case S_1_send___VARIANT_1
          by solve( !KU( ~n.4 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.20 )
        qed
      qed
    qed
  next
    case U_6_send_case_5
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<x^(x.1*~n.4*inv(x.2)), 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(~x.1*inv(x.2)), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(~x.1*inv(x.2)) ) @ #vk.14 )
            case U_2_send___VARIANT_15
            by solve( !KU( ~n.14 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~x.1 ) @ #vk.18 )
          qed
        qed
      qed
    next
      case U_3_send_case_3
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(x.1*~n.7*inv(x.2)), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(x.1*~n.7*inv(x.2)) ) @ #vk.16 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.15 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_3
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case c_exp
            by solve( !KU( ~n.7 ) @ #vk.21 )
          qed
        qed
      qed
    next
      case U_3_send_case_4
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_5
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(x.1*inv(x.2)), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( aenc(x^(x.1*~n.6*inv((x.2*~n.10))), pk(~n.8))
                 ) @ #vk.11 )
            case c_aenc
            solve( !KU( x^(x.1*~n.6*inv((x.2*~n.10))) ) @ #vk.16 )
              case S_1_send___VARIANT_1_case_1
              by solve( !KU( ~n.5 ) @ #vk.18 )
            next
              case S_1_send___VARIANT_1_case_2
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case S_1_send___VARIANT_1_case_3
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_15_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_15_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_18_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_18_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_1_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_1_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_1_case_3
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_1_case_4
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_23_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_23_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_37_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_37_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_6_case_1
              by solve( !KU( ~n.17 ) @ #vk.18 )
            next
              case U_2_send___VARIANT_6_case_2
              by solve( !KU( ~n.18 ) @ #vk.18 )
            next
              case c_exp
              by solve( !KU( ~n.6 ) @ #vk.21 )
            qed
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( KDF(<x^(x.1*~n.5*inv(x.2)), 'encryption'>) ) @ #vk.13 )
        case c_KDF
        solve( !KU( x^(x.1*~n.5*inv(x.2)) ) @ #vk.16 )
          case S_1_send___VARIANT_1_case_1
          by solve( !KU( ~n.4 ) @ #vk.18 )
        next
          case S_1_send___VARIANT_1_case_2
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case S_1_send___VARIANT_1_case_3
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_18_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_18_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_3
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_4
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_23_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_23_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_37_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_37_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_6_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_6_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.21 )
        qed
      qed
    qed
  next
    case c_MAC
    by solve( !KU( ~n.2 ) @ #vk.9 )
  qed
next
  case S_5_send_case_5
  solve( !KU( MAC(<'Voucher', h(token)>, ~n.2) ) @ #vk.5 )
    case S_5_send
    solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.1)) ) @ #vk.9 )
      case c_aenc
      solve( !KU( x^inv((x.1*~n.4)) ) @ #vk.13 )
        case c_exp
        by solve( !KU( ~n.4 ) @ #vk.19 )
      qed
    qed
  next
    case U_6_send
    solve( !KU( aenc(x^inv((x.1*~n.4)), pk(~n.1)) ) @ #vk.8 )
      case c_aenc
      solve( !KU( aenc(x^inv((x.1*~n.9)), pk(~n.7)) ) @ #vk.11 )
        case c_aenc
        solve( !KU( x^inv((x.1*~n.5)) ) @ #vk.12 )
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.20 )
        qed
      qed
    qed
  next
    case c_MAC
    by solve( !KU( ~n.2 ) @ #vk.9 )
  qed
next
  case S_5_send_case_6
  solve( !KU( MAC(<'Voucher', h(token)>, ~n.2) ) @ #vk.5 )
    case S_5_send
    solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.1)) ) @ #vk.9 )
      case c_aenc
      solve( !KU( x^(x.1*inv(~n.4)) ) @ #vk.13 )
        case S_1_send___VARIANT_1_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case S_1_send___VARIANT_1_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_15_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_15_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_18_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_18_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_1_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_1_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_1_case_3
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_1_case_4
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_23_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_23_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_37_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_37_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_6_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_6_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case c_exp
        by solve( !KU( ~n.4 ) @ #vk.19 )
      qed
    qed
  next
    case U_6_send_case_1
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<adec(g_x_enc, ~n.4)^~n.5, 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      solve( !KU( aenc(adec(g_x_enc, ~n.5)^(~n.6*inv(~n.7)), pk(~n.1))
             ) @ #vk.8 )
        case c_aenc
        solve( !KU( adec(g_x_enc, ~n.5)^(~n.6*inv(~n.7)) ) @ #vk.12 )
          case c_exp
          by solve( !KU( ~n.6 ) @ #vk.16 )
        qed
      qed
    next
      case U_3_send_case_2
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_3
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(adec(g_x_enc, ~n.6)^(~n.7*inv(~n.8)), pk(~n.1))
               ) @ #vk.8 )
          case c_aenc
          solve( !KU( adec(g_x_enc, ~n.6)^(~n.7*inv(~n.8)) ) @ #vk.14 )
            case c_exp
            by solve( !KU( ~n.7 ) @ #vk.18 )
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( KDF(<adec(g_x_enc, ~n.5)^~n.6, 'encryption'>)
             ) @ #vk.13 )
        case c_KDF
        solve( !KU( aenc(adec(g_x_enc, ~n.5)^(~n.6*inv(~n.7)), pk(~n.1))
               ) @ #vk.10 )
          case c_aenc
          solve( !KU( adec(g_x_enc, ~n.5)^(~n.6*inv(~n.7)) ) @ #vk.18 )
            case c_exp
            by solve( !KU( ~n.6 ) @ #vk.22 )
          qed
        qed
      qed
    qed
  next
    case U_6_send_case_2
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<x^~n.4, 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      solve( !KU( aenc(x^(~n.5*inv(~n.6)), pk(~n.1)) ) @ #vk.8 )
        case c_aenc
        solve( !KU( x^(~n.5*inv(~n.6)) ) @ #vk.12 )
          case U_2_send___VARIANT_1
          by solve( !KU( ~n.9 ) @ #vk.14 )
        next
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.16 )
        qed
      qed
    next
      case U_3_send_case_2
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_3
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(~n.6*inv(~n.7)), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(~n.6*inv(~n.7)) ) @ #vk.14 )
            case U_2_send___VARIANT_1
            by solve( !KU( ~n.10 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~n.6 ) @ #vk.18 )
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( KDF(<x^~n.5, 'encryption'>) ) @ #vk.13 )
        case c_KDF
        solve( !KU( aenc(x^(~n.5*inv(~n.6)), pk(~n.1)) ) @ #vk.10 )
          case c_aenc
          solve( !KU( x^(~n.5*inv(~n.6)) ) @ #vk.18 )
            case U_2_send___VARIANT_1
            by solve( !KU( ~n.9 ) @ #vk.20 )
          next
            case c_exp
            by solve( !KU( ~n.5 ) @ #vk.22 )
          qed
        qed
      qed
    qed
  next
    case U_6_send_case_3
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<x^(x.1*~n.4), 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( aenc(x^(x.1*~n.5*inv(~n.6)), pk(~n.1)) ) @ #vk.8 )
        case c_aenc
        solve( !KU( x^(x.1*~n.5*inv(~n.6)) ) @ #vk.12 )
          case S_1_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case S_1_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_15_case_1
          by solve( !KU( ~n.9 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_15_case_2
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_15_case_3
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_18_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_18_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_3
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_4
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_23_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_23_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_37_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_37_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_6_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_6_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.17 )
        qed
      qed
    next
      case U_3_send_case_3
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(~x.1*~n.6*inv(~n.7)), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(~x.1*~n.6*inv(~n.7)) ) @ #vk.14 )
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.10 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.14 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~x.1 ) @ #vk.18 )
          qed
        qed
      qed
    next
      case U_3_send_case_4
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(x.1*~n.6*~n.7*inv(~n.8)), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(x.1*~n.6*~n.7*inv(~n.8)) ) @ #vk.16 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.15 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.11 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_3
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_4
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.18 ) @ #vk.18 )
          next
            case c_exp
            by solve( !KU( ~n.6 ) @ #vk.21 )
          qed
        qed
      qed
    next
      case U_3_send_case_5
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(x.1*~n.6*inv(~n.7)), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(x.1*~n.6*inv(~n.7)) ) @ #vk.14 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.10 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_3
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~n.6 ) @ #vk.19 )
          qed
        qed
      qed
    next
      case U_3_send_case_6
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_7
      by contradiction /* non-normal terms */
    next
      case c_senc
      solve( !KU( KDF(<x^(x.1*~n.5), 'encryption'>) ) @ #vk.13 )
        case c_KDF
        solve( !KU( x^(x.1*~n.5) ) @ #vk.16 )
          case S_1_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case S_1_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_1
          by solve( !KU( ~n.9 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_2
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_3
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_18_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_18_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_3
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_4
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_23_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_23_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_37_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_37_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_6_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_6_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.21 )
        qed
      qed
    qed
  next
    case U_6_send_case_4
    solve( !KU( aenc(x^(x.1*inv(~n.4)), pk(~n.1)) ) @ #vk.8 )
      case c_aenc
      solve( !KU( x^(x.1*inv(~n.5)) ) @ #vk.12 )
        case S_1_send___VARIANT_1_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case S_1_send___VARIANT_1_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_15_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_15_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_18_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_18_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_1_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_1_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_1_case_3
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_1_case_4
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_23_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_23_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_37_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_37_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_6_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_6_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case c_exp
        by solve( !KU( ~n.5 ) @ #vk.18 )
      qed
    qed
  next
    case c_MAC
    by solve( !KU( ~n.2 ) @ #vk.9 )
  qed
next
  case S_5_send_case_7
  solve( !KU( MAC(<'Voucher', h(token)>, ~n.2) ) @ #vk.5 )
    case S_5_send
    solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.1)) ) @ #vk.9 )
      case c_aenc
      solve( !KU( x^(x.1*inv((x.2*~n.4))) ) @ #vk.13 )
        case S_1_send___VARIANT_1_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case S_1_send___VARIANT_1_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_15_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_15_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_18_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_18_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_1_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_1_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_1_case_3
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_1_case_4
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_23_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_23_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_37_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_37_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_6_case_1
        by solve( !KU( ~n.5 ) @ #vk.15 )
      next
        case U_2_send___VARIANT_6_case_2
        by solve( !KU( ~n.6 ) @ #vk.15 )
      next
        case c_exp
        by solve( !KU( ~n.4 ) @ #vk.21 )
      qed
    qed
  next
    case U_6_send_case_1
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<x^(~x.1*inv(x.2)), 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( aenc(x^(~x.1*inv((x.2*~n.5))), pk(~n.1)) ) @ #vk.8 )
        case c_aenc
        solve( !KU( x^(~x.1*inv((x.2*~n.5))) ) @ #vk.12 )
          case U_2_send___VARIANT_15
          by solve( !KU( ~n.8 ) @ #vk.14 )
        next
          case c_exp
          by solve( !KU( ~x.1 ) @ #vk.16 )
        qed
      qed
    next
      case U_3_send_case_3
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_4
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(~x.1*inv((x.2*~n.6))), pk(~n.1)) ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(~x.1*inv((x.2*~n.6))) ) @ #vk.14 )
            case U_2_send___VARIANT_15
            by solve( !KU( ~n.9 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~x.1 ) @ #vk.18 )
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( KDF(<x^(~x.1*inv(x.2)), 'encryption'>) ) @ #vk.13 )
        case c_KDF
        solve( !KU( x^(~x.1*inv(x.2)) ) @ #vk.16 )
          case U_2_send___VARIANT_15
          by solve( !KU( ~n.8 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~x.1 ) @ #vk.20 )
        qed
      qed
    qed
  next
    case U_6_send_case_2
    solve( !KU( senc(<'mytoken:', h(token)>,
                     KDF(<x^(x.1*~n.4*inv(x.2)), 'encryption'>))
           ) @ #vk.7 )
      case U_3_send_case_1
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_2
      solve( !KU( aenc(x^(x.1*~n.5*inv((x.2*~n.6))), pk(~n.1))
             ) @ #vk.8 )
        case c_aenc
        solve( !KU( x^(x.1*~n.5*inv((x.2*~n.6))) ) @ #vk.12 )
          case S_1_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case S_1_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_15_case_1
          by solve( !KU( ~n.9 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_15_case_2
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_15_case_3
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_18_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_18_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_3
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_1_case_4
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_23_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_23_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_37_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_37_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_6_case_1
          by solve( !KU( ~n.11 ) @ #vk.14 )
        next
          case U_2_send___VARIANT_6_case_2
          by solve( !KU( ~n.12 ) @ #vk.14 )
        next
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.17 )
        qed
      qed
    next
      case U_3_send_case_3
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(~x.1*~n.6*inv((x.2*~n.7))), pk(~n.1))
               ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(~x.1*~n.6*inv((x.2*~n.7))) ) @ #vk.14 )
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.10 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.14 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~x.1 ) @ #vk.18 )
          qed
        qed
      qed
    next
      case U_3_send_case_4
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(x.1*~n.6*~n.7*inv((x.2*~n.8))), pk(~n.1))
               ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(x.1*~n.6*~n.7*inv((x.2*~n.8))) ) @ #vk.16 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.15 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.11 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_3
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_15_case_4
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.17 ) @ #vk.18 )
          next
            case c_exp
            by solve( !KU( ~n.6 ) @ #vk.21 )
          qed
        qed
      qed
    next
      case U_3_send_case_5
      by contradiction /* non-normal terms */
    next
      case U_3_send_case_6
      solve( !KU( ~n.3 ) @ #vk.7 )
        case U_6_send
        solve( !KU( aenc(x^(x.1*~n.6*inv((x.2*~n.7))), pk(~n.1))
               ) @ #vk.8 )
          case c_aenc
          solve( !KU( x^(x.1*~n.6*inv((x.2*~n.7))) ) @ #vk.14 )
            case S_1_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case S_1_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_1
            by solve( !KU( ~n.10 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_2
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_15_case_3
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_18_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_18_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_3
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_1_case_4
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_23_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_23_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_37_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_37_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_6_case_1
            by solve( !KU( ~n.17 ) @ #vk.16 )
          next
            case U_2_send___VARIANT_6_case_2
            by solve( !KU( ~n.18 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~n.6 ) @ #vk.19 )
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( KDF(<x^(x.1*~n.5*inv(x.2)), 'encryption'>) ) @ #vk.13 )
        case c_KDF
        solve( !KU( x^(x.1*~n.5*inv(x.2)) ) @ #vk.16 )
          case S_1_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case S_1_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_1
          by solve( !KU( ~n.9 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_2
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_15_case_3
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_18_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_18_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_3
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_1_case_4
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_23_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_23_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_37_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_37_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_6_case_1
          by solve( !KU( ~n.11 ) @ #vk.18 )
        next
          case U_2_send___VARIANT_6_case_2
          by solve( !KU( ~n.12 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~n.5 ) @ #vk.21 )
        qed
      qed
    qed
  next
    case U_6_send_case_3
    solve( !KU( aenc(x^(x.1*inv((x.2*~n.4))), pk(~n.1)) ) @ #vk.8 )
      case c_aenc
      solve( !KU( x^(x.1*inv((x.2*~n.5))) ) @ #vk.12 )
        case S_1_send___VARIANT_1_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case S_1_send___VARIANT_1_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_15_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_15_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_18_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_18_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_1_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_1_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_1_case_3
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_1_case_4
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_23_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_23_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_37_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_37_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_6_case_1
        by solve( !KU( ~n.11 ) @ #vk.14 )
      next
        case U_2_send___VARIANT_6_case_2
        by solve( !KU( ~n.12 ) @ #vk.14 )
      next
        case c_exp
        by solve( !KU( ~n.5 ) @ #vk.20 )
      qed
    qed
  next
    case c_MAC
    by solve( !KU( ~n.2 ) @ #vk.9 )
  qed
qed























lemma AUTO_typing [sources]:
  all-traces
  "((⊤) ∧
    (∀ x m #i.
      (AUTO_IN_TERM_1_0_0_1__S_4_receive( m, x ) @ #i) ⇒
      ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
       (∃ #j.
         (AUTO_OUT_TERM_1_0_0_1__S_4_receive( m ) @ #j) ∧ (#j < #i))))) ∧
   (∀ x m #i.
     (AUTO_IN_TERM_1_0_0__U_5_receive( m, x ) @ #i) ⇒
     ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (AUTO_OUT_TERM_1_0_0__U_5_receive( m ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ x m #i.
    (AUTO_IN_TERM_1_0_0_1__S_4_receive( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j.
      (AUTO_OUT_TERM_1_0_0_1__S_4_receive( m ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x m #i.
    (AUTO_IN_TERM_1_0_0__U_5_receive( m, x ) @ #i)
   ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j.
      (AUTO_OUT_TERM_1_0_0__U_5_receive( m ) @ #j) ⇒ ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ x m #i.
           (AUTO_IN_TERM_1_0_0_1__S_4_receive( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j.
             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( m ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x m #i.
           (AUTO_IN_TERM_1_0_0__U_5_receive( m, x ) @ #i)
          ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j.
             (AUTO_OUT_TERM_1_0_0__U_5_receive( m ) @ #j) ⇒ ¬(#j < #i))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', x>, K)
              ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( St_S_4( S, id, ltkS, Kmac, pkltkU, U, K ) ▶₀ #i )
        case S_3_send_case_1
        solve( !KU( senc(<'mytoken:', x>,
                         KDF(<adec(g_y_enc, ~n.1)^~n.4, 'encryption'>))
               ) @ #vk )
          case S_5_send_case_1
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc.1, ~n.6)^~n.7, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_2
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.6, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_3
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_4
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*~n.6), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_5
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_6
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_7
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*inv(x.3)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          by contradiction /* from formulas */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.5)^~n.6, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.9)^~n.10, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.9, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.9, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*~n.9), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*~n.9), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*~n.5), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9*~n.10), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~n.9*inv(x.2)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.9*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^inv(x.2), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^inv(x.2), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^inv(x.2), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^x.2, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^x.2, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc.1,
                                                                                 ~n.6)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^x.2, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*inv(x.3)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.9*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case S_3_send_case_2
        solve( !KU( senc(<'mytoken:', x>, KDF(<z^~n.4, 'encryption'>))
               ) @ #vk )
          case S_5_send_case_1
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.6)^~n.7, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_2
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z.1^~n.6, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_3
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z.1, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_4
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*~n.6), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_5
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_6
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_7
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*inv(x.3)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          by contradiction /* from formulas */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.5)^~n.6, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.9)^~n.10, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.9, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.9, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z.1, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z.1, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z.1, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z.1, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*~n.9), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*~n.9), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*~n.5), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9*~n.10), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~n.9*inv(x.2)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.9*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^inv(x.2), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^inv(x.2), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^inv(x.2), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^x.2, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^x.2, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.6)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^x.2, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*inv(x.3)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.9*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case S_3_send_case_3
        solve( !KU( senc(<'mytoken:', x>, KDF(<z, 'encryption'>)) ) @ #vk )
          case S_5_send_case_1
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.6)^~n.7, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_2
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z.1^~n.6, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_3
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z.1, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_4
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*~n.6), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_5
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_6
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_7
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*inv(x.3)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_3
          by contradiction /* from formulas */
        next
          case U_3_send_case_4
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_5
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_6
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_7
          by contradiction /* non-normal terms */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.4)^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.8)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.9, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.9, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z.1, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z.1, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z.1, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z.1, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*~n.9), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*~n.9), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*~n.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.8*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~n.8*inv(x.2)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.8*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^inv(x.2), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^inv(x.2), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^inv(x.2), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^x.2, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^x.2, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.5)^~n.8, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^x.2, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*inv(x.3)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.8*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case S_3_send_case_4
        solve( !KU( senc(<'mytoken:', x.2>,
                         KDF(<x^(x.1*~n.4), 'encryption'>))
               ) @ #vk )
          case S_5_send_case_1
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.6)^~n.7, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_2
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.6, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_3
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_4
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*~n.6), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_5
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_6
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_7
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*inv(x.5)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          by contradiction /* from formulas */
        next
          case U_3_send_case_3
          by contradiction /* from formulas */
        next
          case U_3_send_case_4
          by contradiction /* from formulas */
        next
          case U_3_send_case_5
          by contradiction /* from formulas */
        next
          case U_3_send_case_6
          by contradiction /* from formulas */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.5)^~n.6, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.9)^~n.10, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.9, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.9, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*~n.9), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*~n.9), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(x.4*~n.5), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.9*~n.10), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~n.9*inv(x.4)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.9*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^inv(x.4), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^inv(x.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^inv(x.4), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^x.4, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^x.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.6)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^x.4, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(x.4*inv(x.5)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.9*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case S_3_send_case_5
        solve( !KU( senc(<'mytoken:', x.2>,
                         KDF(<x^inv(x.1), 'encryption'>))
               ) @ #vk )
          case S_5_send_case_1
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.6)^~n.7, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_2
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.6, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_3
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_4
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*~n.6), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_5
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_6
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_7
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*inv(x.5)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          by contradiction /* from formulas */
        next
          case U_3_send_case_3
          by contradiction /* non-normal terms */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.4)^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.8)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.9, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.9, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*~n.9), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*~n.9), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(~n.4*x.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~n.8*inv(x.4)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.8*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^inv(x.4), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^inv(x.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^inv(x.4), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^x.4, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^x.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.5)^~n.8, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^x.4, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(x.4*inv(x.5)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.8*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case S_3_send_case_6
        solve( !KU( senc(<'mytoken:', x.2>, KDF(<x^x.1, 'encryption'>))
               ) @ #vk )
          case S_5_send_case_1
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.6)^~n.7, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_2
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.6, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_3
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_4
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*~n.6), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_5
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_6
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_7
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*inv(x.5)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* from formulas */
        next
          case U_3_send_case_2
          by contradiction /* from formulas */
        next
          case U_3_send_case_3
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_4
          by contradiction /* from formulas */
        next
          case U_3_send_case_5
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_6
          by contradiction /* from formulas */
        next
          case U_3_send_case_7
          by contradiction /* non-normal terms */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.4)^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.8)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.9, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.9, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*~n.9), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*~n.9), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(~n.4*x.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~n.8*inv(x.4)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.8*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^inv(x.4), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^inv(x.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^inv(x.4), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^x.4, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^x.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.5)^~n.8, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^x.4, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(x.4*inv(x.5)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.8*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case S_3_send_case_7
        solve( !KU( senc(<'mytoken:', x.3>,
                         KDF(<x^(x.1*inv(x.2)), 'encryption'>))
               ) @ #vk )
          case S_5_send_case_1
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.6)^~n.7, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_2
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.6, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_3
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_4
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.4^(x.5*~n.6), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_5
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.4^inv(x.5), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_6
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.4^x.5, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_7
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.4^(x.5*inv(x.6)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.8)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          by contradiction /* from formulas */
        next
          case U_3_send_case_3
          by contradiction /* from formulas */
        next
          case U_3_send_case_4
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_5
          by contradiction /* from formulas */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.7)^~n.9, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.4)^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.8)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.9, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.9, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.4^(x.5*~n.9), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.4^(x.5*~n.9), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.4^(~n.4*x.5), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(~x.5*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(x.5*~n.8*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(x.5*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(~n.8*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.4^(x.5*~n.8*inv(x.6)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.4^inv(x.5), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.4^inv(x.5), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.4^inv(x.5), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^inv(x.5), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.4^x.5, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.4^x.5, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.4^x.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.5)^~n.8, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(x.5*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^x.5, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.4^(x.5*inv(x.6)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.6)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.4^(x.5*inv(x.6)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.12, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.4^(x.5*inv(x.6)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(~x.5*inv(x.6)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.4^(x.5*~n.8*inv(x.6)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(x.5*inv(x.6)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.14)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.12, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(x, K) ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( St_U_5( U, id, ltkU, pkltkS, S, K, token ) ▶₀ #i )
        case U_3_send_case_1
        solve( !KU( senc(x, KDF(<adec(g_x_enc, ~n.1)^~n.3, 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          by contradiction /* from formulas */
        next
          case S_5_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_2
          by contradiction /* from formulas */
        next
          case S_5_send_case_3
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.7)^~n.8, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_4
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.7, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_5
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_6
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*~n.7), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_7
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_8
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_9
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*inv(x.3)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* from formulas */
        next
          case U_3_send_case_2
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_3
          by contradiction /* from formulas */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc.1, ~n.8)^~n.10, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc.1, ~n.8)^~n.10, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc.1, ~n.5)^~n.6, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc.1,
                                                                                 ~n.9)^~n.10, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.10, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.10, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*~n.10), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*~n.10), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*~n.5), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9*~n.10), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~n.9*inv(x.2)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.9*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^inv(x.2), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^inv(x.2), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^inv(x.2), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^x.2, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^x.2, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.6)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^x.2, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*inv(x.3)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.9*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case U_3_send_case_2
        solve( !KU( senc(x, KDF(<g_x^~n.3, 'encryption'>)) ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          by contradiction /* from formulas */
        next
          case S_5_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_2
          by contradiction /* from formulas */
        next
          case S_5_send_case_3
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.7)^~n.8, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_4
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.7, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_5
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_6
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*~n.7), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_7
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_8
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_9
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*inv(x.3)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* from formulas */
        next
          case U_3_send_case_2
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_3
          by contradiction /* from formulas */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.5)^~n.6, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.9)^~n.10, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x.1^~n.10, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x.1^~n.10, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x.1^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x.1^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*~n.10), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*~n.10), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*~n.5), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9*~n.10), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~n.9*inv(x.2)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.9*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^inv(x.2), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^inv(x.2), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^inv(x.2), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^x.2, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^x.2, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.6)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^x.2, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*inv(x.3)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.9*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case U_3_send_case_3
        solve( !KU( senc(x, KDF(<z, 'encryption'>)) ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_3
          by contradiction /* from formulas */
        next
          case S_3_send_case_4
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_5
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_6
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_7
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_01
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_02
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_03
          by contradiction /* from formulas */
        next
          case S_5_send_case_04
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_05
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_06
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_07
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_08
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.7)^~n.8, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_09
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z.1^~n.7, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_10
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z.1, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_11
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*~n.7), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_12
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_13
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_14
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.1^(x.2*inv(x.3)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_3
          by contradiction /* from formulas */
        next
          case U_3_send_case_4
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_5
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_6
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_7
          by contradiction /* non-normal terms */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.4)^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.8)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.10, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.10, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z.1, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z.1, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z.1, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z.1, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*~n.10), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*~n.10), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*~n.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.8*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~n.8*inv(x.2)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.8*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^inv(x.2), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^inv(x.2), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^inv(x.2), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^inv(x.2), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^x.2, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^x.2, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^x.2, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.5)^~n.8, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^x.2, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.1^(x.2*inv(x.3)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.1^(x.2*inv(x.3)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(~x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.1^(x.2*~n.8*inv(x.3)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.1^(x.2*inv(x.3)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case U_3_send_case_4
        solve( !KU( senc(x.2, KDF(<x^(x.1*~n.3), 'encryption'>)) ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          by contradiction /* from formulas */
        next
          case S_3_send_case_3
          by contradiction /* from formulas */
        next
          case S_3_send_case_4
          by contradiction /* from formulas */
        next
          case S_3_send_case_5
          by contradiction /* from formulas */
        next
          case S_3_send_case_6
          by contradiction /* from formulas */
        next
          case S_5_send_case_01
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_02
          by contradiction /* from formulas */
        next
          case S_5_send_case_03
          by contradiction /* from formulas */
        next
          case S_5_send_case_04
          by contradiction /* from formulas */
        next
          case S_5_send_case_05
          by contradiction /* from formulas */
        next
          case S_5_send_case_06
          by contradiction /* from formulas */
        next
          case S_5_send_case_07
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.7)^~n.8, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_08
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.7, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_09
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_10
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*~n.7), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_11
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_12
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_13
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*inv(x.5)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          by contradiction /* from formulas */
        next
          case U_3_send_case_3
          by contradiction /* from formulas */
        next
          case U_3_send_case_4
          by contradiction /* from formulas */
        next
          case U_3_send_case_5
          by contradiction /* from formulas */
        next
          case U_3_send_case_6
          by contradiction /* from formulas */
        next
          case U_3_send_case_7
          by contradiction /* from formulas */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.5)^~n.6, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.9)^~n.10, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.10, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.10, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*~n.10), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*~n.10), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(x.4*~n.5), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.9*~n.10), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~n.9*inv(x.4)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.9*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^inv(x.4), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^inv(x.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^inv(x.4), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^x.4, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^x.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.6)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^~n.9, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^x.4, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(x.4*inv(x.5)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.9*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case U_3_send_case_5
        solve( !KU( senc(x.2, KDF(<x^inv(x.1), 'encryption'>)) ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          by contradiction /* from formulas */
        next
          case S_3_send_case_3
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_01
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_02
          by contradiction /* from formulas */
        next
          case S_5_send_case_03
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_04
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.7)^~n.8, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_05
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.7, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_06
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_07
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*~n.7), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_08
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_09
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_10
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*inv(x.5)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          by contradiction /* from formulas */
        next
          case U_3_send_case_3
          by contradiction /* non-normal terms */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.4)^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.8)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.10, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.10, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*~n.10), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*~n.10), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(~n.4*x.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~n.8*inv(x.4)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.8*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^inv(x.4), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^inv(x.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^inv(x.4), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^x.4, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^x.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.5)^~n.8, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^x.4, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(x.4*inv(x.5)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.8*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case U_3_send_case_6
        solve( !KU( senc(x.2, KDF(<x^x.1, 'encryption'>)) ) @ #vk )
          case S_3_send_case_1
          by contradiction /* from formulas */
        next
          case S_3_send_case_2
          by contradiction /* from formulas */
        next
          case S_3_send_case_3
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_4
          by contradiction /* from formulas */
        next
          case S_3_send_case_5
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_6
          by contradiction /* from formulas */
        next
          case S_3_send_case_7
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_01
          by contradiction /* from formulas */
        next
          case S_5_send_case_02
          by contradiction /* from formulas */
        next
          case S_5_send_case_03
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_04
          by contradiction /* from formulas */
        next
          case S_5_send_case_05
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_06
          by contradiction /* from formulas */
        next
          case S_5_send_case_07
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_08
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.7)^~n.8, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_09
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.7, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_10
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_11
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*~n.7), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_12
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_13
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_14
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.3^(x.4*inv(x.5)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* from formulas */
        next
          case U_3_send_case_2
          by contradiction /* from formulas */
        next
          case U_3_send_case_3
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_4
          by contradiction /* from formulas */
        next
          case U_3_send_case_5
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_6
          by contradiction /* from formulas */
        next
          case U_3_send_case_7
          by contradiction /* non-normal terms */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.4)^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.8)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.10, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.10, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*~n.10), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*~n.10), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(~n.4*x.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~n.8*inv(x.4)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.8*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^inv(x.4), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^inv(x.4), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^inv(x.4), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^inv(x.4), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^x.4, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^x.4, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^x.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.5)^~n.8, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^x.4, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.3^(x.4*inv(x.5)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.3^(x.4*inv(x.5)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(~x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.3^(x.4*~n.8*inv(x.5)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.3^(x.4*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      next
        case U_3_send_case_7
        solve( !KU( senc(x.3, KDF(<x^(x.1*inv(x.2)), 'encryption'>))
               ) @ #vk )
          case S_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_2
          by contradiction /* from formulas */
        next
          case S_3_send_case_3
          by contradiction /* from formulas */
        next
          case S_3_send_case_4
          by contradiction /* non-normal terms */
        next
          case S_3_send_case_5
          by contradiction /* from formulas */
        next
          case S_5_send_case_01
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_02
          by contradiction /* from formulas */
        next
          case S_5_send_case_03
          by contradiction /* from formulas */
        next
          case S_5_send_case_04
          by contradiction /* non-normal terms */
        next
          case S_5_send_case_05
          by contradiction /* from formulas */
        next
          case S_5_send_case_06
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<adec(g_y_enc, ~n.7)^~n.8, 
                                                                  'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_07
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z^~n.7, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_08
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_09
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.4^(x.5*~n.7), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_10
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.4^inv(x.5), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_11
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.4^x.5, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case S_5_send_case_12
          solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.9))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                             KDF(<x.4^(x.5*inv(x.6)), 'encryption'
                                                                 >))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.9)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case U_3_send_case_1
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_2
          by contradiction /* from formulas */
        next
          case U_3_send_case_3
          by contradiction /* from formulas */
        next
          case U_3_send_case_4
          by contradiction /* non-normal terms */
        next
          case U_3_send_case_5
          by contradiction /* from formulas */
        next
          case U_6_send_case_1
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                                'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<adec(g_x_enc, ~n.8)^~n.10, 
                                                               'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<adec(g_x_enc, ~n.4)^~n.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_x_enc,
                                                                                 ~n.8)^~n.9, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_2
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<g_x^~n.10, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<g_x^~n.10, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<g_x^~n.4, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<g_x^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_3
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<z, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<z, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<z, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<z, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_4
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.4^(x.5*~n.10), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.4^(x.5*~n.10), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.4^(~n.4*x.5), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(~x.5*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(x.5*~n.8*~n.9), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(x.5*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(~n.8*inv(x.5)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.4^(x.5*~n.8*inv(x.6)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_5
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.4^inv(x.5), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.4^inv(x.5), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.4^inv(x.5), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^inv(x.5), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_6
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.4^x.5, 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.4^x.5, 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.4^x.5, 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            adec(g_y_enc,
                                                                                 ~n.5)^~n.8, 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^~n.8, 'encryption'
                                                                           >))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_4
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(x.5*~n.8), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_5
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_6
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^x.5, 'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_7
                    by contradiction /* non-normal terms */
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case U_6_send_case_7
          solve( (∃ #j.
                   (!KU( voucher_with_tag ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                 (∃ #j.
                   (AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                           KDF(<x.4^(x.5*inv(x.6)), 'encryption'>))
                    ) @ #j)
                  ∧
                   (¬(last(#j))) ∧ (#j < #vr.7)) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            solve( AUTO_OUT_TERM_1_0_0__U_5_receive( senc(voucher_with_tag,
                                                          KDF(<x.4^(x.5*inv(x.6)), 'encryption'>))
                   ) @ #j )
              case S_3_send
              by contradiction /* forbidden KD-fact */
            next
              case S_5_send
              solve( (#vr.6, 0) ~~> (#vk, 0) )
                case d_0_fst
                solve( (#vr.13, 0) ~~> (#vk, 0) )
                  case d_0_fst
                  by contradiction /* forbidden KD-fact */
                next
                  case d_0_snd
                  solve( St_S_5( S.1, id, ltkS, Kmac, pkltkU, U.1,
                                 KDF(<x.4^(x.5*inv(x.6)), 'encryption'>), H
                         ) ▶₀ #j )
                    case S_4_receive_case_1
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_2
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(~x.5*inv(x.6)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_3
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<
                                                                            x.4^(x.5*~n.8*inv(x.6)
                                                                                ), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case S_4_receive_case_4
                    by contradiction /* non-normal terms */
                  next
                    case S_4_receive_case_5
                    solve( (∃ #j. (!KU( H ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                           (∃ #j.
                             (AUTO_OUT_TERM_1_0_0_1__S_4_receive( senc(<'mytoken:', H>,
                                                                       KDF(<x.4^(x.5*inv(x.6)), 
                                                                            'encryption'>))
                              ) @ #j)
                            ∧
                             (¬(last(#j))) ∧ (#j < #vr.15)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  qed
                qed
              next
                case d_0_snd
                by solve( (#vr.13, 0) ~~> (#vk, 0) )
              qed
            next
              case U_3_send_case_1
              by contradiction /* impossible chain */
            next
              case U_3_send_case_2
              by contradiction /* impossible chain */
            qed
          qed
        next
          case c_senc
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.10.0
Maude version 3.5
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2024-10-30 14:56:23.355649243 UTC
*/

end